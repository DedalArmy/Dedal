<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:mtl="http://www.eclipse.org/acceleo/mtl/3.0" xmlns:ocl.ecore="http://www.eclipse.org/ocl/1.1.0/Ecore">
  <mtl:Module name="generateEvolutionMachine" nsURI="fr::ema::dedal::dedalToB::files::generateEvolutionMachine" startHeaderPosition="29" endHeaderPosition="12194">
    <input>
      <takesTypesFrom href="http://www.dedal.fr/metamodel#/"/>
    </input>
    <ownedModuleElement xsi:type="mtl:Template" name="generateEvolutionMachine" visibility="Public">
      <body xsi:type="ocl.ecore:StringLiteralExp" stringSymbol="&#xA;"/>
      <body xsi:type="mtl:FileBlock" openMode="OverWrite">
        <body xsi:type="ocl.ecore:StringLiteralExp" stringSymbol="&#xA;MACHINE&#xA;    EvolutionManager&#xA;INCLUDES&#xA;    Arch_specification,&#xA;    Arch_configuration,&#xA;    Arch_assembly&#xA;SETS&#xA;    CHANGE_LEVEL = {eLevel, specLevel, configLevel, asmLevel}&#xA;VARIABLES&#xA;    changeLevel,&#xA;    /*variables related to specification*/&#xA;    addedRoles, deletedRoles, addedConnections, deletedConnections, selectedArch,&#xA;    /*variables related to configuration*/&#xA;    addedClassConnections, deletedClassConnections, addedServers, deletedServers, addedClasses, deletedClasses,&#xA;    selectedConfig,&#xA;    /*variables related to assembly*/&#xA;    deletedInstConnections, addedInstConnections, addedInstances, deletedInstances, selectedAsm,&#xA;    addedServerInstances, deletedServerInstances,&#xA;    /*initialisation variables*/&#xA;    init1, init2, init3, init4, init5, init6, init7, init8, init9, init10, init11, init12,&#xA;    initialisation&#xA;INVARIANT&#xA;    &#xA;    changeLevel : CHANGE_LEVEL &amp;&#xA;    /*variables related to specification*/&#xA;    addedRoles &lt;: compRole &amp;&#xA;    deletedRoles &lt;: compRole &amp;&#xA;    addedConnections &lt;: connection &amp;&#xA;    deletedConnections &lt;: connection &amp;&#xA;    selectedArch : ARCH_SPEC &amp;&#xA;    /*variables related to configuration*/&#xA;    addedClassConnections &lt;: connection &amp;&#xA;    deletedClassConnections &lt;: connection &amp;&#xA;    addedServers &lt;: server &amp;&#xA;    deletedServers &lt;: server &amp;&#xA;    addedClasses &lt;: compClass &amp;&#xA;    deletedClasses &lt;: compClass &amp;&#xA;    selectedConfig : CONFIGURATIONS &amp;&#xA;    /*variables related to assembly*/&#xA;    deletedInstConnections &lt;: binding &amp;&#xA;    addedInstConnections &lt;: binding &amp;&#xA;    addedInstances &lt;: compInstance &amp; &#xA;    deletedInstances &lt;: compInstance &amp;&#xA;    selectedAsm : ASSEMBLIES &amp; &#xA;    addedServerInstances &lt;: server_instance &amp;&#xA;    deletedServerInstances &lt;: server_instance &amp;&#xA;    /*initialisation variables*/&#xA;    init1 : BOOL &amp; init2 : BOOL &amp; init3 : BOOL &amp; init4: BOOL &amp; init5 : BOOL &amp; init6 : BOOL &amp; init7 : BOOL &amp;&#xA;    init8 : BOOL &amp; init9 : BOOL &amp; init10 : BOOL &amp; init11 : BOOL &amp; init12 : BOOL &amp;&#xA;    initialisation : BOOL&#xA;DEFINITIONS&#xA;    &#xA;    comp_providedInterfaces(comp) == {int|int : interface &amp; int : comp_interfaces(comp) &amp; int_direction(int) = PROVIDED};&#xA;    comp_requiredInterfaces(comp) == {int|int : interface &amp; int : comp_interfaces(comp) &amp; int_direction(int) = REQUIRED};&#xA;    &#xA;    /*definitions related to roles*/&#xA;    clientInterfaceElem == {cl, int|cl : client &amp; #(comp, rint).(comp : component &amp; rint : interface &amp; cl = (comp,rint) &amp; int = rint)};&#xA;     clientComponentElem == {cl, cr|cl : client &amp; #(comp, rint).(comp : component &amp; rint : interface &amp; cl = (comp,rint) &amp; cr = comp)};&#xA;     serverInterfaceElem == {se, int|se : server &amp; #(comp, pint).(comp : component &amp; pint : interface &amp; se = (comp,pint) &amp; int = pint)};&#xA;     serverComponentElem == {se, cr|se : server &amp; #(comp, pint).(comp : component &amp; pint : interface &amp; se = (comp,pint) &amp; cr = comp)};&#xA;     roleClients(role) == {cl|role: component &amp; cl : client &amp; clientComponentElem(cl) = role};&#xA;     roleServers(role) == {se|role : component &amp; se : server &amp; serverComponentElem(se) = role};&#xA;     &#xA;     specification_consistency == !(cl, spec).(cl : client &amp; spec : specification &amp; cl : spec_clients(spec)  => #(conn, se).(conn : connection &amp; conn : spec_connections(spec) &amp;&#xA;        se : server &amp; se : spec_servers(spec) &amp; conn = (cl|->se))) &amp;&#xA;!(se, spec).(se : server &amp; spec : specification &amp; se : spec_servers(spec)  => #(conn, cl).(conn : connection &amp; conn : spec_connections(spec) &amp;&#xA;        cl : client &amp; cl : spec_clients(spec) &amp; conn = (cl|->se))) &amp;&#xA;    !(conn, spec).(conn : connection &amp; spec: specification  &amp; conn : spec_connections(spec) => #(cl, se).(cl : client &amp; se : server &amp; cl : spec_clients(spec) &amp;&#xA;        se : spec_servers(spec) &amp; conn=(cl|->se))) &amp;&#xA;    !(cr, spec).(cr : compRole &amp; spec : specification &amp; cr : spec_components(spec) => #conn.(conn : connection &amp; conn : spec_connections(spec) &amp; cr : dom(dom({conn})) \/ dom(ran({conn})))) &amp;&#xA;    !(cr, spec).(cr : compRole &amp; spec : specification &amp; cr : spec_components(spec) => !cl.(cl : client &amp; clientComponentElem(cl) = cr => cl : spec_clients(spec))) &amp;&#xA;    !(cr, spec).(cr : compRole &amp; spec : specification &amp; cr : spec_components(spec) => !se.(se : server &amp; serverComponentElem(se) = cr => se : spec_servers(spec)));&#xA;    &#xA;     /*definitions related to classes*/&#xA;     class_interfaces(cl) == comp_interfaces(class_implements(cl));&#xA;    classClients(class) == {cl|class : compClass &amp; cl : client &amp; clientComponentElem(cl) = class_implements(class)};&#xA;    classServers(class) == {se|class : compClass &amp; se : server &amp; serverComponentElem(se) = class_implements(class)};&#xA;    class_substitution == (class_implements ; compType_substitution ; class_implements~);&#xA;    &#xA;    config_consistency == !(cl, config).(cl : client &amp; config : configuration &amp; cl : config_clients(config)  => #(conn, se).(conn : connection &amp; conn : config_connections(config) &amp;&#xA;        se : server &amp; se : config_servers(config) &amp; conn = (cl|->se))) &amp;&#xA;!(se, config).(se : server &amp; config : configuration  &amp; se : config_servers(config)  => #(conn, cl).(conn : connection &amp; conn : config_connections(config) &amp;&#xA;        cl : client &amp; cl : config_clients(config) &amp; conn = (cl|->se))) &amp;&#xA;    !(conn, config).(conn : connection &amp; config : configuration  &amp; conn : config_connections(config) => #(cl, se).(cl : client &amp; se : server &amp; cl : config_clients(config) &amp;&#xA;        se : config_servers(config) &amp; conn=(cl|->se))) &amp;&#xA;    !(class, config).(class : compClass &amp; config : configuration   &amp; class : config_components(config) => #conn.(conn : connection &amp; conn : config_connections(config) &amp; class_implements(class) : dom(dom({conn})) \/ dom(ran({conn})))) &amp;&#xA;    !(class, config).(class : compClass &amp; config : configuration   &amp; class : config_components(config) => !cl.(cl : client &amp; clientComponentElem(cl) = class_implements(class) => cl : config_clients(config))) &amp;&#xA;     !(class1, class2, config).(class1 : compClass &amp; class2 : compClass &amp; config : configuration &amp; {class1,class2} &lt;: config_components(config) => ((class1, class2) /: class_substitution &amp; (class2, class1) /: class_substitution));&#xA;    &#xA;    /*definitions related to instances*/&#xA;    inst_direction(int) == int_direction(int_instantiates(int));&#xA;    serverInterfaceInstElem == {se, int|se : server_instance &amp; #(inst, pint).(inst : compInstance &amp; pint : interfaceInstance &amp; se = (inst,pint) &amp; int = pint)};&#xA;    clientInstanceElem == {cl, inst|inst : compInstance &amp; cl : client_instance &amp; #(ci, rint).(ci : compInstance &amp; rint : interfaceInstance &amp; cl = (ci,rint) &amp; ci = inst)};&#xA;    serverInstanceElem == {se, inst|inst : compInstance &amp; se : server_instance &amp; #(ci, pint).(ci : compInstance &amp; pint : interfaceInstance &amp; se = (ci,pint) &amp; ci = inst)};&#xA;    instanceClients(inst) == {cl|inst : compInstance &amp; cl : client_instance &amp; clientInstanceElem(cl) = inst};&#xA;    instanceServers(inst) == {se|inst : compInstance &amp; se : server_instance &amp; serverInstanceElem(se) = inst};&#xA;    inst_substitution == (comp_instantiates;class_implements ; compType_substitution ; class_implements~;comp_instantiates~);&#xA;    &#xA;    assembly_consistency == !(cl, asm).(cl : client_instance &amp; asm : assembly &amp; cl : assm_clients(asm)  => #(conn, se).(conn : binding &amp; conn : assm_connections(asm) &amp;&#xA;        se : server_instance &amp; se : assm_servers(asm) &amp; conn = (cl|->se))) &amp;&#xA;!(se, asm).(se : server_instance &amp; asm : assembly &amp;  se : assm_servers(asm)  => #(conn, cl).(conn : binding &amp; conn : assm_connections(asm) &amp;&#xA;        cl : client_instance &amp; cl : assm_clients(asm) &amp; conn = (cl|->se))) &amp;&#xA;    !(conn, asm).(conn : binding &amp; asm : assembly &amp; conn : assm_connections(asm) => #(cl, se).(cl : client_instance &amp; se : server_instance &amp; cl : assm_clients(asm) &amp;&#xA;        se : assm_servers(asm) &amp; conn=(cl|->se))) &amp;&#xA;    !(inst, asm).(inst : compInstance &amp; asm : assembly &amp; inst : assm_components(asm) => #conn.(conn : binding &amp; conn : assm_connections(asm) &amp; inst : dom(dom({conn})) \/ dom(ran({conn})))) &amp;&#xA;    !(inst, asm).(inst : compInstance &amp; asm : assembly &amp; inst : assm_components(asm) => !cl.(cl : client_instance &amp; clientInstanceElem(cl) = inst => cl : assm_clients(asm)));&#xA;    &#xA;    /*coherence property*/&#xA;    specConfigCoherence == !(spec, config).(spec : specification &amp; config : configuration => ((config, spec) : implements &lt;=> !CR.(CR : compRole &amp; CR : spec_components(spec) => #CL.(CL : compClass &amp; CL : config_components(config) &amp; (CL,CR) : realizes))) &amp; (spec, config) : documents &lt;=> !se1.(se1 : server &amp; se1 : config_servers(config) => #se2.(se2 : server &amp; se2 : spec_servers(spec) &amp; (serverInterfaceElem(se2), serverInterfaceElem(se1)) : int_substitution)));&#xA;    configAssemblyCoherence == !(asm, config).(asm: assembly &amp; config : configuration => (&#xA;           (asm, config) : instantiates &lt;=> (!cl.(cl : compClass &amp; cl : config_components(config) => #ci.(ci : compInstance &amp; ci : assm_components(asm) &amp; (ci, cl) : comp_instantiates))&#xA;               &amp;&#xA;               (!ci.(ci : compInstance &amp; ci : assm_components(asm) => #cl.(cl : compClass &amp; cl : config_components(config) &amp; (ci, cl) : comp_instantiates))))));&#xA;       &#xA;    coherence == specConfigCoherence &amp; configAssemblyCoherence;&#xA;     &#xA;    /*specification evolution rules preconditions*/&#xA;    roleAdditionPrecondition == spec : specification &amp; newRole : compRole &amp; newRole /: spec_components(spec)  &amp;&#xA;        !cr.(cr : compRole &amp; cr : spec_components(spec) => comp_name(cr) /= comp_name(newRole)) ;&#xA;    roleConnectionPrecondition == spec : specification &amp; cl : client &amp; se : server &amp; cl : spec_clients(spec) &amp; se : spec_servers(spec) &amp;&#xA;       (cl|->se) : connection &amp; (cl|->se) /: spec_connections(spec) &amp; !se1.(se1 : server &amp; se1 : spec_servers(spec) => (cl|->se1) /: spec_connections(spec)) &amp;&#xA;       !cl2.(cl2 : client &amp; cl2 : spec_clients(spec) => (cl2|->se) /: spec_connections(spec));&#xA;    roleDeletionPrecondition == spec : specification &amp; role : compRole &amp; role : spec_components(spec) &amp;&#xA;       !cl.(cl : client &amp; cl : roleClients(role) => !se.(se : server &amp; se : spec_servers(spec) => (cl|->se) /: spec_connections(spec))) &amp;&#xA;       !(se).(se : server &amp; se : roleServers(role) => !cl.(cl : client &amp; cl : spec_clients(spec) => (cl|->se) /: spec_connections(spec)));&#xA;    roleDisconnectionPrecondition == spec : specification &amp; cl : client &amp; se : server &amp; cl : spec_clients(spec) &amp; se : spec_servers(spec) &amp;&#xA;       (cl|->se) : connection &amp; (cl|->se) : spec_connections(spec);   &#xA;    roleSubstitutionPrecondition == oldRole : compRole &amp; newRole : compRole &amp; spec : specification &amp; oldRole : spec_components(spec) &amp; &#xA;    newRole /: spec_components(spec) &amp; (oldRole, newRole) : role_substitution &amp; &#xA;       !cl.(cl : client &amp; cl : roleClients(oldRole) => !se.(se : server &amp; se : spec_servers(spec) => (cl|->se) /: spec_connections(spec))) &amp;&#xA;       !se.(se : server &amp; se : roleServers(oldRole) => !cl.(cl : client &amp; cl : spec_clients(spec) => (cl|->se) /: spec_connections(spec)));&#xA;    roleInitSubstitutionPrecondition == oldRole : compRole &amp; newRole : compRole &amp; spec : specification &amp; oldRole : spec_components(spec) &amp; &#xA;       newRole /: spec_components(spec) &amp; (oldRole, newRole) : role_substitution;&#xA;    roleInitDeletionPrecondition == spec : specification &amp; role : compRole &amp; role : spec_components(spec);&#xA;    /*configuration evolution rules preconditions*/&#xA;    classInitAdditionPrecondition == config : configuration &amp; newClass : compClass &amp; newClass /: config_components(config) &amp;&#xA;       !cl.(cl : compClass &amp; cl : config_components(config) => class_name(cl) /= class_name(newClass) &amp; class_implements(newClass) /= class_implements(cl)) &amp; &#xA;       services &lt;: server &amp; services &lt;: classServers(newClass);&#xA;    classAdditionPrecondition == config : configuration &amp; newClass : compClass &amp; newClass /: config_components(config) &amp;&#xA;    !cl.(cl : compClass &amp; cl : config_components(config) => class_name(cl) /= class_name(newClass) &amp; class_implements(newClass) /= class_implements(cl));&#xA;    serverAdditionPrecondition == config : configuration &amp; se : server &amp; se /: config_servers(config) &amp; serverComponentElem(se) : class_implements"/>
        <body xsi:type="ocl.ecore:StringLiteralExp" stringSymbol="[config_components(config)]">
          <eType xsi:type="ocl.ecore:PrimitiveType" href="http://www.eclipse.org/ocl/1.1.0/oclstdlib.ecore#/0/String"/>
        </body>
        <body xsi:type="ocl.ecore:StringLiteralExp" stringSymbol=";&#xA;    serverDeletionPrecondition == config : configuration &amp; se : server &amp; se : config_servers(config) &amp; !cl.(cl : client &amp; cl : config_clients(config) =>&#xA;           (cl|->se) /: config_connections(config));&#xA;    classConnectionPrecondition == config : configuration &amp; cl : client &amp; se : server &amp; cl : config_clients(config) &amp; se : config_servers(config) &amp;&#xA;       (cl|->se) : connection &amp; (cl|->se) /: config_connections(config);&#xA;    classDeletionPrecondition == config : configuration &amp; class : compClass &amp; class : config_components(config) &amp;&#xA;       !cl.(cl : client &amp; cl : classClients(class) => !se.(se : server &amp; se : config_servers(config) => (cl|->se) /: config_connections(config))) &amp;&#xA;       !se.(se : server &amp; se : classServers(class) => se /: config_servers(config));&#xA;    classDisconnectionPrecondition == config : configuration &amp; cl : client &amp; se : server &amp; cl : config_clients(config) &amp; se : config_servers(config) &amp;&#xA;    (cl|->se) : connection &amp; (cl|->se) : config_connections(config);&#xA;    classSubstitutionPrecondition == oldClass : compClass &amp; newClass : compClass &amp; config : configuration &amp; oldClass : config_components(config) &amp; &#xA;       newClass /: config_components(config) &amp; (oldClass, newClass) : class_substitution &amp; &#xA;       !cl.(cl : client &amp; cl : classClients(oldClass) => !se.(se : server &amp; se : config_servers(config) => (cl|->se) /: config_connections(config))) &amp;&#xA;       !(se).(se : server &amp; se : classServers(oldClass) => se /: config_servers(config));&#xA;    classInitSubstitutionPrecondition == oldClass : compClass &amp; newClass : compClass &amp; config : configuration &amp; oldClass : config_components(config) &amp; &#xA;       newClass /: config_components(config) &amp; (oldClass, newClass) : class_substitution &amp; services &lt;: server &amp; &#xA;       !se.(se : server &amp; se : services => se : classServers(newClass)) &amp;&#xA;       !se1.(se1 : server &amp; se1 : classServers(oldClass) => #se2.(se2 : server &amp; se2 : services &amp; serverInterfaceElem(se2) : int_substitution"/>
        <body xsi:type="ocl.ecore:StringLiteralExp" stringSymbol="[{serverInterfaceElem(se1)}]">
          <eType xsi:type="ocl.ecore:PrimitiveType" href="http://www.eclipse.org/ocl/1.1.0/oclstdlib.ecore#/0/String"/>
        </body>
        <body xsi:type="ocl.ecore:StringLiteralExp" stringSymbol="));&#xA;    classInitDeletionPrecondition == config : configuration &amp; class : compClass &amp; class : config_components(config);&#xA;    /*assembly evolution preconditions*/&#xA;    instanceInitAdditionPrecondition == asm : assembly &amp; class : compClass &amp; &#xA;        inst : compInstance &amp; class = comp_instantiates(inst) &amp; inst /: assm_components(asm) &amp;&#xA;        services &lt;: server_instance &amp; services &lt;: instanceServers(inst) &amp;&#xA;        nb_instances(class) &lt; max_instances(class);&#xA;    instanceAdditionPrecondition == asm : assembly &amp; class : compClass &amp; inst : compInstance &amp; class = comp_instantiates(inst) &amp; inst /: assm_components(asm) &amp;&#xA;        nb_instances(class) &lt; max_instances(class);&#xA;    serverInstanceAdditionPrecondition == asm : assembly &amp; se : server_instance &amp; se /: assm_servers(asm) &amp; serverInstanceElem(se) : assm_components(asm);&#xA;    instanceBindingPrecondition == asm : assembly &amp; cl : client_instance &amp; se : server_instance &amp; cl : assm_clients(asm) &amp; se : assm_servers(asm) &amp;&#xA;    (cl|->se) : binding &amp; (cl|->se) /: assm_connections(asm);&#xA;    serverInstanceDeletionPrecondition == asm : assembly &amp; se : server_instance &amp; se : assm_servers(asm) &amp; !cl.(cl : client_instance &amp; cl : assm_clients(asm) =>&#xA;           (cl|->se) /: assm_connections(asm));&#xA;    instanceDeletionPrecondition == asm : assembly &amp; inst : compInstance &amp; inst : assm_components(asm) &amp; class : compClass &amp; class = comp_instantiates(inst) &amp;&#xA;       !cl.(cl : client_instance &amp; cl : instanceClients(inst) => !se.(se : server_instance &amp; se : assm_servers(asm) => (cl|->se) /: assm_connections(asm))) &amp;&#xA;       !se.(se : server_instance &amp; se : instanceServers(inst) => se /: assm_servers(asm));&#xA;    instanceUnbindigPrecondition == asm : assembly &amp; cl : client_instance &amp; se : server_instance &amp; cl : assm_clients(asm) &amp; se : assm_servers(asm) &amp;&#xA;    (cl|->se) : binding &amp; (cl|->se) : assm_connections(asm);&#xA;    instanceSubstitutionPrecondition == oldInst : compInstance &amp; newInst : compInstance &amp; asm : assembly &amp; oldInst : assm_components(asm) &amp; &#xA;       newInst /: assm_components(asm) &amp; (oldInst, newInst) : inst_substitution &amp; &#xA;       !cl.(cl : client_instance &amp; cl : instanceClients(oldInst) => !se.(se : server_instance &amp; se : assm_servers(asm) => (cl|->se) /: assm_connections(asm))) &amp;&#xA;       !(se).(se : server_instance &amp; se : instanceServers(oldInst) => se /: assm_servers(asm));&#xA;    instanceInitSubstitutionPrecondition == oldInst : compInstance &amp; newInst : compInstance &amp; asm : assembly &amp; oldInst : assm_components(asm) &amp; &#xA;       newInst /: assm_components(asm) &amp; (oldInst, newInst) : inst_substitution &amp; &#xA;       !se1.(se1 : server_instance &amp; se1 : instanceServers(oldInst) => #se2.(se2 : server_instance &amp; se2 : instanceServers(newInst) &amp; int_instantiates(serverInterfaceInstElem(se2)) : int_substitution"/>
        <body xsi:type="ocl.ecore:StringLiteralExp" stringSymbol="[{int_instantiates(serverInterfaceInstElem(se1))}]">
          <eType xsi:type="ocl.ecore:PrimitiveType" href="http://www.eclipse.org/ocl/1.1.0/oclstdlib.ecore#/0/String"/>
        </body>
        <body xsi:type="ocl.ecore:StringLiteralExp" stringSymbol="));&#xA;    instanceInitDeletionPrecondition ==  asm : assembly &amp; inst : compInstance &amp; inst : assm_components(asm) &amp; class : compClass &amp; class = comp_instantiates(inst)&#xA;    &#xA;       &#xA;INITIALISATION&#xA;       &#xA;    changeLevel := eLevel ||&#xA;    /*variables related to specification*/&#xA;    addedRoles := {} ||&#xA;    deletedRoles := {} ||&#xA;    addedConnections := {} ||&#xA;    deletedConnections := {} ||&#xA;    selectedArch := eArch ||&#xA;    /*variables related to configuration*/&#xA;    addedClassConnections := {} ||&#xA;    deletedClassConnections := {} ||&#xA;    addedServers := {} ||&#xA;    deletedServers := {} ||&#xA;    addedClasses := {} ||&#xA;    deletedClasses := {} ||&#xA;    selectedConfig := eConfig ||&#xA;    /*variables related to assembly*/&#xA;    deletedInstConnections := {} ||&#xA;    addedInstConnections := {} ||&#xA;    addedInstances := {} ||&#xA;    deletedInstances := {} ||&#xA;    selectedAsm := eAssm || &#xA;    addedServerInstances := {} ||&#xA;    deletedServerInstances := {} ||&#xA;    /*initialisation variables*/&#xA;    init1 := TRUE ||&#xA;    init2 := FALSE ||&#xA;    init3 := FALSE ||&#xA;    init4 := FALSE ||&#xA;    init5 := FALSE ||&#xA;    init6 := FALSE ||&#xA;    init7 := FALSE ||&#xA;    init8 := FALSE ||&#xA;    init9 := FALSE ||&#xA;    init10 := FALSE ||&#xA;    init11 := FALSE ||&#xA;    init12 := FALSE ||&#xA;    initialisation := FALSE&#xA;OPERATIONS&#xA;    &#xA;    /*initializations*/&#xA;    mng_initializeParameterSubtype =&#xA;    PRE&#xA;        init1=TRUE&#xA;    THEN&#xA;        s_initializeParameterSubtype ||&#xA;        init1:=FALSE ||&#xA;        init2 := TRUE&#xA;    END;&#xA;    mng_initializesignatureSubtype =&#xA;    PRE&#xA;        init2 = TRUE&#xA;    THEN&#xA;        &#xA;        s_initializesignatureSubtype ||&#xA;        init2 := FALSE ||&#xA;        init3 := TRUE&#xA;    END;&#xA;    &#xA;    mng_initializeInterfaceSubtype =&#xA;    PRE&#xA;        init3 = TRUE&#xA;    THEN&#xA;        s_initializeInterfaceSubtype ||&#xA;        init3 := FALSE ||&#xA;        init4 := TRUE&#xA;    END;&#xA;    mng_initializeBasicModel =&#xA;    PRE&#xA;        init4 = TRUE&#xA;    THEN&#xA;        s_initializeBasicModel ||&#xA;        init4 := FALSE ||&#xA;        init5 := TRUE&#xA;    END;&#xA;    &#xA;    mng_initializeArchModel =&#xA;    PRE&#xA;        init5 = TRUE&#xA;    THEN&#xA;        s_initializeArchModel ||&#xA;        init5 := FALSE ||&#xA;        init6 := TRUE&#xA;    END;&#xA;    &#xA;    mng_initializeConnections =&#xA;    PRE&#xA;        init6 = TRUE&#xA;    THEN&#xA;        s_initializeConnections ||&#xA;        init6 := FALSE ||&#xA;        init7 := TRUE&#xA;    END;&#xA;    &#xA;    mng_initialzeArchSpecModel =&#xA;    PRE&#xA;        init7 = TRUE&#xA;    THEN&#xA;        initialzeArchSpecModel ||&#xA;        init7 := FALSE ||&#xA;        init8 := TRUE&#xA;    END;&#xA;    &#xA;    mng_initializeArchConfig =&#xA;    PRE&#xA;        init8 = TRUE&#xA;    THEN&#xA;        initializeArchConfig ||&#xA;        init8 := FALSE ||&#xA;        init9 := TRUE&#xA;    END;&#xA;    &#xA;    mng_computeRealizations =&#xA;    PRE&#xA;        init9 = TRUE&#xA;    THEN&#xA;        computeRealizations ||&#xA;        init9 := FALSE ||&#xA;        init10 := TRUE&#xA;    END;&#xA;    &#xA;    mng_initializeArchAssembly =&#xA;    PRE&#xA;        init10 = TRUE&#xA;    THEN&#xA;        initializeArchAssembly ||&#xA;        init10 := FALSE ||&#xA;        init11 := TRUE &#xA;    END;&#xA;    &#xA;    mng_initializeBindings =&#xA;    PRE&#xA;        init11 = TRUE&#xA;    THEN&#xA;        initializeBindings ||&#xA;        init11 := FALSE ||&#xA;        init12 := TRUE &#xA;    END;&#xA;    &#xA;    /*set architecture descriptions*/&#xA;    &#xA;    mng_setTargetArchitectures(spec, config, assm) =&#xA;    PRE&#xA;        spec : specification &amp; config : configuration &amp; assm : assembly &amp;&#xA;        init12 = TRUE&#xA;    THEN&#xA;        selectedArch := spec ||&#xA;        selectedConfig := config ||&#xA;        selectedAsm := assm ||&#xA;        init12 := FALSE ||&#xA;        initialisation := TRUE&#xA;    END;&#xA;    &#xA;    /*set change level*/&#xA;    setChangeLevel(newChangeLevel) =&#xA;    PRE&#xA;        initialisation = TRUE &amp; newChangeLevel : CHANGE_LEVEL &amp; newChangeLevel /= eLevel &amp; changeLevel /= newChangeLevel&#xA;    THEN&#xA;        changeLevel := newChangeLevel&#xA;    END;&#xA;    &#xA;    /*spec evolution rules*/&#xA;   &#xA;    changeArtifact &lt;-- spec_addRole(spec, newRole) =&#xA;    PRE&#xA;        initialisation = TRUE &amp;&#xA;        changeLevel = specLevel &amp;&#xA;        roleAdditionPrecondition &amp;&#xA;        selectedArch = spec &amp;&#xA;        newRole /: (deletedRoles \/ addedRoles)&#xA;    THEN&#xA;       addRole(spec, newRole) ||&#xA;       addedRoles := addedRoles \/ {newRole} ||&#xA;       changeArtifact := newRole&#xA;    END;&#xA;    &#xA;    artifact1,artifact2 &lt;-- spec_connect(cl, se, spec) =&#xA;    PRE&#xA;        initialisation = TRUE &amp;&#xA;        changeLevel = specLevel &amp;&#xA;        selectedArch = spec &amp;&#xA;        roleConnectionPrecondition &amp;&#xA;        (cl|->se) /: (deletedConnections \/ addedConnections)&#xA;    THEN&#xA;        connect(cl, se, spec) ||&#xA;        addedConnections := addedConnections \/ {(cl|->se)}||&#xA;        artifact1 := clientComponentElem(cl) ||&#xA;        artifact2 := serverComponentElem(se) &#xA;    END;&#xA;    &#xA;    spec_removeRole(spec, role) =&#xA;    PRE&#xA;        initialisation = TRUE &amp;&#xA;        changeLevel = specLevel &amp;  &#xA;        roleDeletionPrecondition &amp;&#xA;        selectedArch = spec &amp;&#xA;        role /: (deletedRoles \/ addedRoles)&#xA;    THEN&#xA;        removeRole(spec, role) ||&#xA;        deletedRoles := deletedRoles \/ {role}&#xA;    END;&#xA;    &#xA;    artifact1, artifact2 &lt;-- spec_disconnect(spec, se, cl) =&#xA;    PRE&#xA;        initialisation = TRUE &amp;&#xA;       changeLevel = specLevel &amp; roleDisconnectionPrecondition &amp;&#xA;       selectedArch = spec &amp;&#xA;       (cl|->se) /: (deletedConnections \/ addedConnections)&#xA;    THEN&#xA;        disconnect(spec, se, cl) ||&#xA;        deletedConnections := deletedConnections \/ {(cl|->se)} ||&#xA;        artifact1 := clientComponentElem(cl) ||&#xA;        artifact2 := serverComponentElem(se)&#xA;    END;&#xA;    &#xA;    changeArtifact &lt;-- spec_replaceRole(spec, oldRole, newRole) =&#xA;    PRE&#xA;       initialisation = TRUE &amp;&#xA;       changeLevel = specLevel &amp; &#xA;       roleSubstitutionPrecondition &amp;&#xA;       selectedArch = spec &amp;&#xA;       oldRole /: (deletedRoles \/ addedRoles) &amp; newRole /: (deletedRoles \/ addedRoles)&#xA;    THEN&#xA;        replaceRole(spec, oldRole, newRole) ||&#xA;        deletedRoles := deletedRoles \/ {oldRole} ||&#xA;        addedRoles := addedRoles \/ {newRole} ||&#xA;        changeArtifact := newRole&#xA;    END;&#xA;    &#xA;    /*configuration evolution rules*/&#xA;    &#xA;    changeArtifact &lt;-- config_addClass(config, newClass) =&#xA;    PRE&#xA;        initialisation = TRUE &amp;&#xA;        changeLevel = configLevel &amp; &#xA;        classAdditionPrecondition &amp;&#xA;        newClass /: (deletedClasses \/ addedClasses) &amp;&#xA;        selectedConfig = config&#xA;    THEN&#xA;        addClass(config, newClass) ||&#xA;        addedClasses := addedClasses \/ {newClass} ||&#xA;        changeArtifact := class_implements(newClass) &#xA;    END;&#xA;    &#xA;    changeArtifact &lt;-- config_addServer(config, se) =&#xA;    PRE&#xA;        initialisation = TRUE &amp;&#xA;        changeLevel = configLevel &amp; &#xA;        serverAdditionPrecondition &amp;&#xA;        se /: (addedServers \/ deletedServers) &amp;&#xA;        selectedConfig = config&#xA;    THEN&#xA;       addServer(config, se) ||&#xA;       addedServers := addedServers \/ {se} ||&#xA;       changeArtifact := serverComponentElem(se)&#xA;    END;&#xA;    &#xA;    artifact1, artifact2 &lt;-- config_class_connect(cl, se, config) =&#xA;    PRE&#xA;        initialisation = TRUE &amp;&#xA;        changeLevel = configLevel &amp; &#xA;        classConnectionPrecondition &amp;&#xA;        (cl|->se) /: (deletedConnections \/ addedConnections) &amp;&#xA;        selectedConfig = config&#xA;    THEN&#xA;        class_connect(cl, se, config) ||&#xA;        addedConnections := addedConnections \/ {(cl|->se)}||&#xA;        artifact1 := clientComponentElem(cl) ||&#xA;        artifact2 := serverComponentElem(se)&#xA;    END;&#xA;    &#xA;   changeArtifact &lt;-- config_deleteServer(config, se) =&#xA;   PRE&#xA;       initialisation = TRUE &amp;&#xA;       changeLevel = configLevel &amp; &#xA;       serverDeletionPrecondition &amp;&#xA;        se /: (addedServers \/ deletedServers) &amp;&#xA;        selectedConfig = config&#xA;   THEN&#xA;       deleteServer(config, se) ||&#xA;       deletedServers := deletedServers \/ {se} ||&#xA;       changeArtifact := serverComponentElem(se)&#xA;   END;&#xA;    &#xA;    config_removeClass(config, class) =&#xA;    PRE&#xA;        initialisation = TRUE &amp;&#xA;       changeLevel = configLevel &amp; &#xA;       classDeletionPrecondition &amp;&#xA;       class /: (deletedClasses \/ addedClasses) &amp;&#xA;       selectedConfig = config&#xA;    THEN&#xA;        removeClass(config, class) ||&#xA;        deletedClasses := deletedClasses \/ {class}&#xA;    END;&#xA;    &#xA;    artifact1, artifact2 &lt;-- config_class_disconnect(config, se, cl) =&#xA;    PRE&#xA;        initialisation = TRUE &amp;&#xA;        changeLevel = configLevel &amp; &#xA;       classDisconnectionPrecondition &amp; &#xA;       (cl|->se) /: (deletedConnections \/ addedConnections) &amp;&#xA;       selectedConfig = config&#xA;    THEN&#xA;        class_disconnect(config, se, cl) ||&#xA;        deletedConnections := deletedConnections \/ {(cl|->se)} ||&#xA;        artifact1 := clientComponentElem(cl) ||&#xA;        artifact2 := serverComponentElem(se)&#xA;    END;&#xA;    &#xA;    changeArtifact &lt;-- config_replaceClass(config, oldClass, newClass) =&#xA;    PRE&#xA;        initialisation = TRUE &amp;&#xA;        changeLevel = configLevel &amp; &#xA;        classSubstitutionPrecondition &amp;&#xA;        oldClass /: (deletedClasses \/ addedClasses) &amp; newClass /: (deletedClasses \/ addedClasses) &amp;&#xA;        selectedConfig = config&#xA;    THEN&#xA;         replaceClass(config, oldClass, newClass) ||&#xA;         deletedClasses := deletedClasses \/ {oldClass} ||&#xA;         addedClasses := addedClasses \/ {newClass} ||&#xA;         changeArtifact := newClass&#xA;    END;&#xA;    &#xA;    /*Assembly evolution rules*/&#xA;    &#xA;    changeArtifact &lt;-- asm_deployInstance(asm, inst, class) =&#xA;    PRE&#xA;        initialisation = TRUE &amp;&#xA;        changeLevel = asmLevel &amp; &#xA;        instanceAdditionPrecondition &amp;&#xA;        inst /: (addedInstances \/ deletedInstances) &amp;&#xA;        selectedAsm = asm&#xA;    THEN&#xA;        deployInstance(asm, inst, class) ||&#xA;        addedInstances := addedInstances \/ {inst} ||&#xA;        changeArtifact := inst&#xA;    END;&#xA;    &#xA;    changeArtifact &lt;-- asm_addServerInstance(asm, se) =&#xA;    PRE&#xA;        initialisation = TRUE &amp;&#xA;       changeLevel = asmLevel &amp; &#xA;       selectedAsm = asm &amp; &#xA;       serverInstanceAdditionPrecondition &amp;&#xA;       se /: (addedServerInstances \/ deletedServerInstances) &#xA;   THEN&#xA;       addServerInstance(asm, se) ||&#xA;       addedServerInstances := addedServerInstances \/ {se} ||&#xA;       changeArtifact := serverInstanceElem(se)&#xA;   END;&#xA;    &#xA;    artifact1, artifact2 &lt;-- asm_bind(cl, se, asm) =&#xA;    PRE&#xA;        initialisation = TRUE &amp;&#xA;        changeLevel = asmLevel &amp;&#xA;        instanceBindingPrecondition &amp;&#xA;       (cl|->se) /: (deletedInstConnections \/ addedInstConnections) &amp;&#xA;       selectedAsm = asm&#xA;    THEN&#xA;        bind(cl, se, asm) ||&#xA;        addedInstConnections := addedInstConnections \/ {(cl|->se)} ||&#xA;        artifact1 := clientInstanceElem(cl) ||&#xA;        artifact2 := serverInstanceElem(se)&#xA;    END;&#xA;    &#xA;   asm_removeInstance(asm, inst, class) =&#xA;   PRE&#xA;       initialisation = TRUE &amp;&#xA;       changeLevel = asmLevel &amp; &#xA;       instanceDeletionPrecondition &amp; &#xA;       inst /: (deletedInstances \/ addedInstances) &amp;&#xA;       selectedAsm = asm&#xA;   THEN&#xA;       removeInstance(asm, inst, class) ||&#xA;       deletedInstances := deletedInstances \/ {inst}&#xA;   END;&#xA;   &#xA;   artifact1, artifact2 &lt;-- asm_unbind(asm, se, cl) =&#xA;   PRE&#xA;       initialisation = TRUE &amp;&#xA;       changeLevel = asmLevel &amp; &#xA;       instanceUnbindigPrecondition &amp;&#xA;       (cl|->se) /: (deletedInstConnections \/ addedInstConnections) &amp; &#xA;       selectedAsm = asm&#xA;   THEN&#xA;       unbind(asm, se, cl) ||&#xA;       deletedInstConnections := deletedInstConnections \/ {(cl|->se)} ||&#xA;       artifact1 := clientInstanceElem(cl) ||&#xA;       artifact2 := serverInstanceElem(se)&#xA;   END;&#xA;   &#xA;   changeArtifact &lt;-- asm_deleteServerInstance(asm, se) =&#xA;    PRE&#xA;        initialisation = TRUE &amp;&#xA;        changeLevel = asmLevel &amp; &#xA;        selectedAsm = asm &amp; &#xA;         serverInstanceDeletionPrecondition &amp;&#xA;         se /: (addedServerInstances \/ deletedServerInstances)&#xA;   THEN&#xA;       deleteServerInstance(asm, se) ||&#xA;       deletedServerInstances := deletedServerInstances \/ {se} ||&#xA;       changeArtifact := serverInstanceElem(se) &#xA;   END;&#xA;   &#xA;   changeArtifact &lt;-- asm_replaceInstance(asm, oldInst, newInst) =&#xA;   PRE&#xA;       initialisation = TRUE &amp;&#xA;       instanceSubstitutionPrecondition &amp;&#xA;       changeLevel = asmLevel &amp;&#xA;       oldInst /: (deletedInstances \/ addedInstances) &amp; newInst /: (deletedInstances \/ addedInstances) &amp;&#xA;       selectedAsm = asm&#xA;   THEN&#xA;       replaceInstance(asm, oldInst, newInst) ||&#xA;       addedInstances := addedInstances \/ {newInst} ||&#xA;       deletedInstances := deletedInstances \/ {oldInst} ||&#xA;       changeArtifact := newInst&#xA;   END&#xA;&#xA;END&#xA;&#xA;&#xA;"/>
        <fileUrl xsi:type="ocl.ecore:StringLiteralExp" stringSymbol="EvolutionManager.mch">
          <eType xsi:type="ocl.ecore:PrimitiveType" href="http://www.eclipse.org/ocl/1.1.0/oclstdlib.ecore#/0/String"/>
        </fileUrl>
        <charset xsi:type="ocl.ecore:StringLiteralExp" stringSymbol="UTF-8">
          <eType xsi:type="ocl.ecore:PrimitiveType" href="http://www.eclipse.org/ocl/1.1.0/oclstdlib.ecore#/0/String"/>
        </charset>
      </body>
      <parameter name="aDedalDiagram">
        <eType xsi:type="ecore:EClass" href="http://www.dedal.fr/metamodel#//DedalDiagram"/>
      </parameter>
    </ownedModuleElement>
  </mtl:Module>
  <ecore:EPackage name="additions">
    <eClassifiers xsi:type="ecore:EClass" name="oclstdlib_String_Class">
      <eAnnotations source="http://www.eclipse.org/ocl/1.1.0/OCL">
        <references href="http://www.eclipse.org/ocl/1.1.0/oclstdlib.ecore#/0/String"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="oclstdlib_Integer_Class">
      <eAnnotations source="http://www.eclipse.org/ocl/1.1.0/OCL">
        <references href="http://www.eclipse.org/ocl/1.1.0/oclstdlib.ecore#/0/Integer"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="oclstdlib_Real_Class">
      <eAnnotations source="http://www.eclipse.org/ocl/1.1.0/OCL">
        <references href="http://www.eclipse.org/ocl/1.1.0/oclstdlib.ecore#/0/Real"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="ecore_EObject_Class">
      <eAnnotations source="http://www.eclipse.org/ocl/1.1.0/OCL">
        <references href="http://www.eclipse.org/emf/2002/Ecore#//EObject"/>
      </eAnnotations>
      <eOperations name="generateEvolutionMachine">
        <eAnnotations source="http://www.eclipse.org/ocl/1.1.0/OCL">
          <contents xsi:type="ocl.ecore:Constraint"/>
        </eAnnotations>
        <eAnnotations source="MTL" references="/0/generateEvolutionMachine"/>
        <eType xsi:type="ocl.ecore:PrimitiveType" href="http://www.eclipse.org/ocl/1.1.0/oclstdlib.ecore#/0/String"/>
        <eParameters name="aDedalDiagram">
          <eType xsi:type="ecore:EClass" href="http://www.dedal.fr/metamodel#//DedalDiagram"/>
        </eParameters>
      </eOperations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="oclstdlib_OclAny_Class">
      <eAnnotations source="http://www.eclipse.org/ocl/1.1.0/OCL">
        <references href="http://www.eclipse.org/ocl/1.1.0/oclstdlib.ecore#/0/OclAny"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="oclstdlib_Collection(T)_Class">
      <eAnnotations source="http://www.eclipse.org/ocl/1.1.0/OCL">
        <references href="http://www.eclipse.org/ocl/1.1.0/oclstdlib.ecore#/0/Collection(T)"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="oclstdlib_Sequence(T)_Class">
      <eAnnotations source="http://www.eclipse.org/ocl/1.1.0/OCL">
        <references href="http://www.eclipse.org/ocl/1.1.0/oclstdlib.ecore#/0/Sequence(T)"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="oclstdlib_OrderedSet(T)_Class">
      <eAnnotations source="http://www.eclipse.org/ocl/1.1.0/OCL">
        <references href="http://www.eclipse.org/ocl/1.1.0/oclstdlib.ecore#/0/OrderedSet(T)"/>
      </eAnnotations>
    </eClassifiers>
    <eClassifiers xsi:type="ecore:EClass" name="dedal_DedalDiagram_Class">
      <eAnnotations source="http://www.eclipse.org/ocl/1.1.0/OCL">
        <references href="http://www.dedal.fr/metamodel#//DedalDiagram"/>
      </eAnnotations>
    </eClassifiers>
  </ecore:EPackage>
  <ocl.ecore:Variable name="self">
    <eType xsi:type="ecore:EClass" href="http://www.eclipse.org/emf/2002/Ecore#//EObject"/>
  </ocl.ecore:Variable>
  <ocl.ecore:Variable name="self">
    <eType xsi:type="ecore:EClass" href="http://www.dedal.fr/metamodel#//DedalDiagram"/>
  </ocl.ecore:Variable>
  <ocl.ecore:Variable name="self">
    <eType xsi:type="ocl.ecore:PrimitiveType" href="http://www.eclipse.org/ocl/1.1.0/oclstdlib.ecore#/0/String"/>
  </ocl.ecore:Variable>
  <ocl.ecore:Variable name="self">
    <eType xsi:type="ecore:EClass" href="http://www.dedal.fr/metamodel#//DedalDiagram"/>
  </ocl.ecore:Variable>
  <ocl.ecore:Variable name="self">
    <eType xsi:type="ecore:EClass" href="http://www.dedal.fr/metamodel#//DedalDiagram"/>
  </ocl.ecore:Variable>
  <ocl.ecore:Variable name="self">
    <eType xsi:type="ecore:EClass" href="http://www.dedal.fr/metamodel#//DedalDiagram"/>
  </ocl.ecore:Variable>
  <ocl.ecore:Variable name="self">
    <eType xsi:type="ecore:EClass" href="http://www.dedal.fr/metamodel#//DedalDiagram"/>
  </ocl.ecore:Variable>
  <ocl.ecore:Variable name="self">
    <eType xsi:type="ecore:EClass" href="http://www.dedal.fr/metamodel#//DedalDiagram"/>
  </ocl.ecore:Variable>
  <ocl.ecore:Variable name="self">
    <eType xsi:type="ecore:EClass" href="http://www.dedal.fr/metamodel#//DedalDiagram"/>
  </ocl.ecore:Variable>
  <ocl.ecore:Variable name="self">
    <eType xsi:type="ecore:EClass" href="http://www.eclipse.org/emf/2002/Ecore#//EObject"/>
  </ocl.ecore:Variable>
  <ecore:EAnnotation source="positions">
    <eAnnotations source="positions.0" references="/0/generateEvolutionMachine">
      <details key="start" value="98"/>
      <details key="end" value="29327"/>
      <details key="line" value="5"/>
    </eAnnotations>
    <eAnnotations source="positions.1" references="/0/generateEvolutionMachine/%">
      <details key="start" value="171"/>
      <details key="end" value="172"/>
      <details key="line" value="6"/>
    </eAnnotations>
    <eAnnotations source="positions.2" references="/0/generateEvolutionMachine/%.1">
      <details key="start" value="172"/>
      <details key="end" value="29315"/>
      <details key="line" value="7"/>
    </eAnnotations>
    <eAnnotations source="positions.3" references="/0/generateEvolutionMachine/%.1/%">
      <details key="start" value="220"/>
      <details key="end" value="12164"/>
      <details key="line" value="8"/>
    </eAnnotations>
    <eAnnotations source="positions.4" references="/0/generateEvolutionMachine/%.1/%.1">
      <details key="start" value="12165"/>
      <details key="end" value="12194"/>
      <details key="line" value="0"/>
    </eAnnotations>
    <eAnnotations source="positions.5" references="/0/generateEvolutionMachine/%.1/%.2">
      <details key="start" value="12196"/>
      <details key="end" value="14153"/>
      <details key="line" value="149"/>
    </eAnnotations>
    <eAnnotations source="positions.6" references="/0/generateEvolutionMachine/%.1/%.3">
      <details key="start" value="14154"/>
      <details key="end" value="14184"/>
      <details key="line" value="0"/>
    </eAnnotations>
    <eAnnotations source="positions.7" references="/0/generateEvolutionMachine/%.1/%.4">
      <details key="start" value="14186"/>
      <details key="end" value="16959"/>
      <details key="line" value="166"/>
    </eAnnotations>
    <eAnnotations source="positions.8" references="/0/generateEvolutionMachine/%.1/%.5">
      <details key="start" value="16960"/>
      <details key="end" value="17012"/>
      <details key="line" value="0"/>
    </eAnnotations>
    <eAnnotations source="positions.9" references="/0/generateEvolutionMachine/%.1/%.6">
      <details key="start" value="17014"/>
      <details key="end" value="29308"/>
      <details key="line" value="191"/>
    </eAnnotations>
    <eAnnotations source="positions.10" references="/0/generateEvolutionMachine/%.1/%.7">
      <details key="start" value="179"/>
      <details key="end" value="201"/>
      <details key="line" value="0"/>
    </eAnnotations>
    <eAnnotations source="positions.11" references="/0/generateEvolutionMachine/%.1/%.8">
      <details key="start" value="210"/>
      <details key="end" value="217"/>
      <details key="line" value="0"/>
    </eAnnotations>
    <eAnnotations source="positions.12" references="/0/generateEvolutionMachine/aDedalDiagram">
      <details key="start" value="140"/>
      <details key="end" value="168"/>
      <details key="line" value="5"/>
    </eAnnotations>
  </ecore:EAnnotation>
</xmi:XMI>
