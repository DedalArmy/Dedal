[comment encoding = UTF-8 /]
[module generateAllArchAssm('http://www.dedal.fr/metamodel')]


[template public generateAllArchAssm(aDedalDiagram : DedalDiagram)]

[file ('Arch_assembly.mch', false, 'UTF-8')]

MACHINE
    Arch_assembly
USES
    Arch_specification, Arch_configuration
SETS
    COMP_INSTANCES = {eInst
[if (self.repositories->notEmpty())]
[for (rep : Repository|self.repositories) before(',') separator(',')]
[for (inst :CompInstance |rep.eContents(CompInstance)) separator(',')]
	['s_ci'+inst.id/]
[/for]
[/for]
[/if]
[for (inst :CompInstance |self.eContents(Assembly).assmComponents) before(',') separator(',')]
	['ci'+inst.id/]
[/for]
};
    INTERFACE_INSTANCES = {
[if (self.repositories->notEmpty())]
[for (rep : Repository|self.repositories) separator(',') after(',')]
[for (int : Interface |rep.eContents(CompInstance).compInterfaces) separator(',')]
	[int.name/]
[/for]
[/for]
[/if]
[for (int : Interface |self.eContents(Assembly).assmComponents.compInterfaces) separator(',')]
	[int.name/]
[/for]
   };
    INSTANCE_NAME = {
[if (self.repositories->notEmpty())]
[for (rep : Repository|self.repositories) separator(',') after(',')]
[for (ci : CompInstance |rep.eContents(CompInstance)) separator(',')]
	[ci.name/]
[/for]
[/for]
[/if]
[for (ci : CompInstance |self.eContents(Assembly).assmComponents) separator(',')]
	[ci.name/]
[/for]
};
    ASSEMBLIES = {eAssm
[for (assm : Assembly|self.eContents(Assembly)) before(',') separator(',')]
[assm.name/]
[/for]
};
    ATTRIBUTES_VALUES
    /*ASS_CONSTRAINTS*/
    
VARIABLES
    compInstance, compInstance_name, interfaceInstance, int_instantiates, instInterfaces, comp_instantiates,
    initiation_state, current_state, attribute_value, /*constraints, assemblyConstraint, initConfig,*/ 
    assembly, assm_components, instantiates, binding, assm_connections, client_instance, server_instance, max_instances, nb_instances,
    assm_servers, assm_clients
    
INVARIANT
    
    /*Component instance definition*/
   compInstance <: COMP_INSTANCES &
   compInstance_name : compInstance --> INSTANCE_NAME &
   nb_instances : compClass --> NAT &
   max_instances : compClass --> NAT &
   interfaceInstance <: INTERFACE_INSTANCES &
   int_instantiates : interfaceInstance --> interface &
   instInterfaces : compInstance --> POW1(interfaceInstance) &
   comp_instantiates : compInstance --> compClass &
   !(ci, cl).(ci : compInstance & cl : compClass =>
       (cl = comp_instantiates(ci) => #surj.(surj : instInterfaces(ci) -->> class_interfaces(cl) &
               !int.(int : interfaceInstance & int : instInterfaces(ci) => surj(int) = int_instantiates(int))))) &
   
   attribute_value : attribute -->  ATTRIBUTES_VALUES &
   initiation_state : compInstance --> POW(attribute_value) &
   !(ci, rl).(ci : compInstance & rl : POW(attribute_value) & (ci, rl) : initiation_state => !att.(att : attribute & att : dom(rl) =>
       #cc.(cc: compClass & (ci,cc) : comp_instantiates & att : class_attributes(cc)))) & 
   current_state : compInstance --> POW(attribute_value) &
   !(ci, rl).(ci : compInstance & rl : POW(attribute_value) & (ci, rl) : current_state => !att.(att : attribute & att : dom(rl) =>
       #cc.(cc: compClass & (ci,cc) : comp_instantiates & att : class_attributes(cc)))) &

    client_instance : compInstance<->interfaceInstance &
    !(ci, int).(ci : compInstance & int : interfaceInstance & (ci, int):client_instance => inst_direction(int) = REQUIRED) &
    server_instance : compInstance <-> interfaceInstance &
    !(ci, int).(ci : compInstance & int : interfaceInstance & (ci, int) : server_instance => inst_direction(int) = PROVIDED) &
    binding : client_instance <-> server_instance &

    /*assemblyConstraint <: ASS_CONSTRAINTS &
    constraints : compInstance --> POW(assemblyConstraint) &*/
   /*Assembly definition*/
   assembly <: ASSEMBLIES &
   assm_components : assembly --> POW1(compInstance) &
   assm_servers : assembly --> POW(server_instance) &
   assm_clients : assembly --> POW(client_instance) &
   assm_connections : assembly --> POW(binding) &
   instantiates : assembly --> configuration &
   !(AS, CC).(AS: assembly & CC : configuration => (
           (AS, CC) : instantiates <=> !cl.(cl : compClass & cl : config_components(CC) => #ci.(ci : compInstance & ci : assm_components(AS) & (ci, cl) : comp_instantiates))
       )
   )
   /*initConfig : BOOL*/
   
DEFINITIONS
    inst_direction(int) == int_direction(int_instantiates(int));
    class_interfaces(cl) == comp_interfaces(class_implements(cl));
    clientInterfaceElem == {cl, int|cl : clientInstance & #(inst, rint).(inst : compInstance & rint : interfaceInstance & cl = (inst,rint) & int = rint)};
    clientComponentElem == {cl, ci|cl : client_instance & #(inst, rint).(inst : compInstance & rint : interfaceInstance & cl = (inst,rint) & ci = inst)};
    serverInterfaceElem == {se, int|se : server_instance & #(inst, pint).(inst : compInstance & pint : interfaceInstance & se = (inst,pint) & int = pint)};
    serverComponentElem == {se, ci|se : server_instance & #(inst, pint).(inst : compInstance & pint : interfaceInstance & se = (inst,pint) & ci = inst)};
    clients(inst) == {cl|inst : compInstance & cl : client_instance & clientComponentElem(cl) = inst};
    servers(inst) == {se|inst : compInstance & se : server_instance & serverComponentElem(se) = inst};
    all_clientInstances == {ci, int| ci : compInstance & int : interfaceInstance & int_direction(int_instantiates(int)) = REQUIRED & int : instInterfaces(ci)};
    all_serverInstances == {ci, int| ci : compInstance & int : interfaceInstance & int_direction(int_instantiates(int)) = PROVIDED & int : instInterfaces(ci)};
    inst_substitution == (comp_instantiates;class_implements ; compType_substitution ; class_implements~;comp_instantiates~);
    all_bindings == {cl, se|cl :client_instance & se : server_instance & #(c1, c2, int1, int2).(c1 : compInstance & c2 : compInstance & c1 /= c2 & int1 : interfaceInstance & int2 : interfaceInstance & (c1|->int1)=cl & (c2|->int2)=se & (int_instantiates(int1), int_instantiates(int2)) : int_compatible)}
    
INITIALISATION
    compInstance := {
[if (self.repositories->notEmpty())]
[for (rep : Repository|self.repositories) separator(',') after(',')]
[for (inst :CompInstance |rep.eContents(CompInstance)) separator(',')]
	['s_ci'+inst.id/]
[/for]
[/for]
[/if]
[for (inst :CompInstance |self.eContents(Assembly).assmComponents) separator(',')]
	['ci'+inst.id/]
[/for]
} ||
    compInstance_name := {
[if (self.repositories->notEmpty())]
[for (rep : Repository|self.repositories) separator(',') after(',')]
[for (inst :CompInstance |rep.eContents(CompInstance)) separator(',')]
	['(s_ci'+inst.id+'|->'+inst.name+')'/]
[/for]
[/for]
[/if]
[for (inst :CompInstance |self.eContents(Assembly).assmComponents) separator(',')]
	['(ci'+inst.id+'|->'+inst.name+')'/]
[/for]
    } ||
    max_instances := {
[if (self.repositories->notEmpty())]
[for (rep : Repository|self.repositories) separator(',') after(',')]
[for (cl : CompClass |rep.eContents(CompClass)) separator(',')]
	['(s_cl'+cl.id+'|->1)'/]
[/for]
[/for]
[/if]
[for (cl : CompClass |self.eContents(Configuration).configComponents) separator(',')]
	['(cl'+cl.id+'|->1)'/]
[/for]} ||
    nb_instances := {
[if (self.repositories->notEmpty())]
[for (rep : Repository|self.repositories) separator(',') after(',')]
[for (cl : CompClass |rep.eContents(CompClass)) separator(',')]
	['(s_cl'+cl.id+'|->0)'/]
[/for]
[/for]
[/if]
[for (cl : CompClass |self.eContents(Configuration).configComponents) separator(',')]
	['(cl'+cl.id+'|->1)'/]
[/for]} ||
    interfaceInstance := {
[if (self.repositories->notEmpty())]
[for (rep : Repository|self.repositories) separator(',') after(',')]
[for (int : Interface |rep.eContents(CompInstance).compInterfaces) separator(',')]
	[int.name/]
[/for]
[/for]
[/if]
[for (int : Interface |self.eContents(Assembly).assmComponents.compInterfaces) separator(',')]
	[int.name/]
[/for]} ||
    int_instantiates := {
[if (self.repositories->notEmpty())]
[for (rep : Repository|self.repositories) separator(',') after(',')]
[for (int : Interface |rep.eContents(CompInstance).compInterfaces) separator(',')]
	['('+int.name+'|->'+int.instantiates.name+')'/]
[/for]
[/for]
[/if]
[for (int : Interface |self.eContents(Assembly).assmComponents.compInterfaces) separator(',')]
	['('+int.name+'|->'+int.instantiates.name+')'/]
[/for]
} ||
    instInterfaces := {
[if (self.repositories->notEmpty())]
[for (rep : Repository|self.repositories) separator(',') after(',')]
[for (ci : CompInstance |rep.eContents(CompInstance)) separator(',')]
['s_ci'+ci.id+'|->{'/]
	[for (int : Interface|ci.compInterfaces) separator(',') after('}')]
		[int.name/]
	[/for]
[/for]
[/for]
[/if]
[for (ci : CompInstance |self.eContents(Assembly).assmComponents) separator(',')]
	['ci'+ci.id+'|->{'/]
	[for (int : Interface | ci.compInterfaces) separator(',') after('}')]
		[int.name/]
	[/for]
[/for]}||
    initiation_state := {} ||
    current_state := {} ||
    comp_instantiates := {
[if (self.repositories->notEmpty())]
[for (rep : Repository|self.repositories) separator(',') after(',')]
[for (ci : CompInstance |rep.eContents(CompInstance)) separator(',')]
['(s_ci'+ci.id+'|->s_cl'+ci.instantiates.id+')'/]
[/for]
[/for]
[for (ci : CompInstance |self.eContents(Assembly).assmComponents) separator(',')]
	['(ci'+ci.id+'|->cl'+ci.instantiates.id+')'/]
[/for]
[/if]} ||
    attribute_value := {} ||
    client_instance := {
[for (con : InstConnection |self.eContents(Assembly).assemblyConnections) separator(',')]
['(ci'+con.clientInstElem.id+'|->'+con.clientIntElem.name+')'/]
[/for]} ||
    server_instance := {
[for (con : InstConnection |self.eContents(Assembly).assemblyConnections) separator(',')]
['(ci'+con.serverInstElem.id+'|->'+con.serverIntElem.name+')'/]
[/for]} ||
    binding := {
[for (con : InstConnection |self.eContents(Assembly).assemblyConnections) separator(',')]
['((ci'+con.clientInstElem.id+'|->'+con.clientIntElem.name+')'+'|->(ci'+con.serverInstElem.id+'|->'+con.serverIntElem.name+'))'/]
[/for]} ||
    assembly := {
[for (assm : Assembly|self.eContents(Assembly)) separator(',')]
[assm.name/]
[/for]} ||
    assm_components := {
[for (assm : Assembly|self.eContents(Assembly)) separator(',')]
[assm.name+'|->{'/]
[for (ci : CompInstance | assm.assmComponents) separator(',') after('}')]
	['ci'+ci.id/]
[/for]
[/for]} ||
    assm_connections := {
[for (assm : Assembly|self.eContents(Assembly)) separator(',')]
[assm.name+'|->{'/]
[for (con : InstConnection|assm.assemblyConnections) separator(',') after('}')]
['((ci'+con.clientInstElem.id+'|->'+con.clientIntElem.name+')'+'|->(ci'+con.serverInstElem.id+'|->'+con.serverIntElem.name+'))'/]
[/for]
[/for]} ||
assm_servers := {
[for (assm : Assembly|self.eContents(Assembly)) separator(',')]
[assm.name+'|->{'/]
[for (con : InstConnection|assm.assemblyConnections) separator(',') after('}')]
['(ci'+con.serverInstElem.id+'|->'+con.serverIntElem.name+')'/]
[/for]
[/for]} ||
assm_clients := {
[for (assm : Assembly|self.eContents(Assembly)) separator(',')]
[assm.name+'|->{'/]
[for (con : InstConnection|assm.assemblyConnections) separator(',') after('}')]
['(ci'+con.clientInstElem.id+'|->'+con.clientIntElem.name+')'/]
[/for]
[/for]} ||
    instantiates := {
[for (assm : Assembly|self.eContents(Assembly)) separator(',')]
[assm.name+'|->'+assm.instantiates.name/]
[/for]
}
    
OPERATIONS
    
    initializeBindings =
    BEGIN
        binding := all_bindings
    END;
    
    initializeArchAssembly =
    BEGIN
        client_instance := all_clientInstances ||
        server_instance := all_serverInstances
    END;

    init_deployInstance(asm, inst, class, state, services) =
    PRE
        asm : assembly & class : compClass & inst : compInstance & class = comp_instantiates(inst) & inst /: assm_components(asm) &
        state : POW(attribute_value) & card(state) = card(class_attributes(class)) & nb_instances(class) < max_instances(class) &
        services <: server_instance & services <: servers(inst)
    THEN
       initiation_state(inst) := state ||
       current_state(inst) := state ||
       nb_instances(class) := nb_instances(class) + 1 ||
       assm_components(asm) := assm_components(asm) \/ {inst} ||
       assm_servers(asm) := assm_servers(asm) \/ services ||
       assm_clients(asm) := assm_clients(asm) \/ clients(inst)
    END;
    
    deployInstance(asm, inst, class) =
    PRE
        asm : assembly & class : compClass & inst : compInstance & class = comp_instantiates(inst) & inst /: assm_components(asm) &
        nb_instances(class) < max_instances(class)
    THEN
       nb_instances(class) := nb_instances(class) + 1 ||
       assm_components(asm) := assm_components(asm) \/ {inst} ||
       assm_clients(asm) := assm_clients(asm) \/ clients(inst)
    END;
    
    addServerInstance(asm, se) =
   PRE
       asm : assembly & se : server_instance & se /: assm_servers(asm) & serverComponentElem(se) : assm_components(asm)
   THEN
       assm_servers(asm) := assm_servers(asm) \/ {se}
   END;
    
    bind(cl, se, asm) =
    PRE
       asm : assembly & cl : client_instance & se : server_instance & cl : assm_clients(asm) & se : assm_servers(asm) &
       (cl|->se) : binding & (cl|->se) /: assm_connections(asm)
       /*(cl|->se) /: (deletedConnections \/ addedConnections) &
       changeOperation /= none*/
   THEN
       assm_connections(asm) := assm_connections(asm) \/ {(cl|->se)}
       /*addedConnections := addedConnections \/ {(cl|->se)}*/
   END;
   
   deleteServerInstance(asm, se) =
   PRE
        asm : assembly & se : server_instance & se : assm_servers(asm) & !cl.(cl : client_instance & cl : assm_clients(asm) =>
           (cl|->se) /: assm_connections(asm)) 
   THEN
       assm_servers(asm) := assm_servers(asm) - {se}
   END;
    
   removeInstance(asm, inst, class) =
   PRE
       asm : assembly & inst : compInstance & inst : assm_components(asm) & class : compClass & class = comp_instantiates(inst) &
       !cl.(cl : client_instance & cl : clients(inst) => !se.(se : server_instance & se : assm_servers(asm) => (cl|->se) /: assm_connections(asm))) &
       !se.(se : server_instance & se : servers(inst) => se /: assm_servers(asm))
       /*changeOperation /= none &
       class /: (deletedClasses \/ addedClasses)*/
   THEN
       nb_instances(class) := nb_instances(class) - 1 ||
       assm_clients(asm) := assm_clients(asm) - clients(inst) ||
       assm_components(asm) := assm_components(asm) - {inst}
       /*deletedClasses := deletedClasses \/ {class}*/
   END;
   
   unbind(asm, se, cl) =
   PRE
       asm : assembly & cl : client_instance & se : server_instance & cl : assm_clients(asm) & se : assm_servers(asm) &
       (cl|->se) : binding & (cl|->se) : assm_connections(asm)
       /*& (cl|->se) /: (deletedConnections \/ addedConnections) & changeOperation /= none*/
   THEN
        assm_connections(asm) := assm_connections(asm) - {(cl|->se)}
        /*deletedConnections := deletedConnections \/ {(cl|->se)}*/
   END;
   
   replaceInstance(asm, oldInst, newInst) =
   PRE
       oldInst : compInstance & newInst : compInstance & asm : assembly & oldInst : assm_components(asm) & 
       newInst /: assm_components(asm) & (oldInst, newInst) : inst_substitution & 
       !cl.(cl : client_instance & cl : clients(oldInst) => !se.(se : server_instance & se : assm_servers(asm) => (cl|->se) /: assm_connections(asm))) &
       !(se).(se : server_instance & se : servers(oldInst) => se /: assm_servers(asm))
       /*& changeOperation /= none */
   THEN
       assm_components(asm) := (assm_components(asm) - {oldInst}) \/ {newInst} ||
       assm_clients(asm) := (assm_clients(asm) - clients(oldInst)) \/ clients(newInst)
   END;
   
   init_replaceInstance(asm, oldInst, newInst) =
   PRE
       oldInst : compInstance & newInst : compInstance & asm : assembly & oldInst : assm_components(asm) & 
       newInst /: assm_components(asm) & (oldInst, newInst) : inst_substitution & 
       !se1.(se1 : server_instance & se1 : servers(oldInst) => #se2.(se2 : server_instance & se2 : servers(newInst) & int_instantiates(serverInterfaceElem(se2)) : int_substitution['[{int_instantiates(serverInterfaceElem(se1))}]'/]))
   THEN
       assm_components(asm) := (assm_components(asm) - {oldInst}) \/ {newInst} ||
       assm_clients(asm) := (assm_clients(asm) - clients(oldInst))  \/ clients(newInst)||
       assm_servers(asm) := (assm_servers(asm) - servers(oldInst))  \/ servers(newInst) ||
       assm_connections(asm) := assm_connections(asm) - ({cl,se|cl : client_instance & se : server_instance & cl : clients(oldInst) & (cl|->se) : assm_connections(asm)} \/
           {cl,se|cl : client_instance & se : server_instance & cl : clients(oldInst) & (cl|->se) : assm_connections(asm)})
       /*addedServers := addedServers \/ services ||
       selectedClass := oldClass ||
       selectedConfig := config ||
       changeOperation := SUBSTITUTION*/
   END;
    
   init_removeInstance(asm, inst, class) =
   PRE
       asm : assembly & inst : compInstance & inst : assm_components(asm) & class : compClass & class = comp_instantiates(inst)
   THEN
       nb_instances(class) := nb_instances(class) - 1 ||
       assm_components(asm) := assm_components(asm) - {inst} ||
       assm_clients(asm) := assm_clients(asm) - clients(inst) ||
       assm_servers(asm) := assm_servers(asm) - servers(inst) ||
       assm_connections(asm) := assm_connections(asm) - ({cl,se|cl : client_instance & se : server_instance & cl : clients(inst) & (cl|->se) : assm_connections(asm)} \/
           {cl,se|cl : client_instance & se : server_instance & se : servers(inst) & (cl|->se) : assm_connections(asm)})
       /*selectedClass := class ||
       selectedConfig := config ||
       changeOperation := DELETION*/
   END 
    
END

[/file]

[/template]
