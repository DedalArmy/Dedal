[comment encoding = UTF-8 /]
[module generateAllArchSpec('http://www.dedal.fr/metamodel')]


[template public generateAllArchSpec(aDedalDiagram : DedalDiagram)]
[file ('Arch_specification.mch', false, 'UTF-8')]

MACHINE
    Arch_specification
INCLUDES
    Arch_concepts
CONSTANTS
    COMP_ROLES,
    ARCH_SPEC
PROPERTIES
    COMP_ROLES <: COMPONENTS &
    COMP_ROLES = {eRole
[if (self.repositories->notEmpty())]
[for (rep : Repository|self.repositories) before(',') separator(',')]
[for (c : CompRole|rep.eContents(CompRole)) separator(',')]
['s_cr'+c.id/]
[/for]
[/for]
[/if]
[for (cr : CompRole|self.eContents(Specification).specComponents) before(',') separator(',')]
['cr'+cr.id/]
[/for]
} &
    ARCH_SPEC <: ARCHITECTURES &
    ARCH_SPEC = {eArch
[for (spec : Specification|self.eContents(Specification)) before(',') separator(',')]
[spec.name/]
[/for]}
VARIABLES
    specification, spec_components, spec_connections, compRole, role_substitution, role_compatible, spec_clients, spec_servers
    /*variables for computation*/
    /*clientSelection, servicesList, connectedClients, compatibleRoles, connectedRoles, selectedRole, rolesToReplace, serversReplaced, clientsReplaced, changeOperation,
    selectedArch, serversToAdd, clientsToAdd, gard1, gard2, gard3, gard4, gard5, gard6, initialization, serversGard, clientsGard, addedRoles, deletedRoles, addedServers, deletedServers,
    addedClients, deletedClients, addedConnections, deletedConnections*/
INVARIANT

    compRole <: COMP_ROLES &
    role_substitution : compRole <-> compRole &
    !(C_sup, C_sub).(C_sup : compRole & C_sub : compRole & C_sup /= C_sub =>
        (C_sub : role_substitution['[{C_sup}]'/]  <=> #(inj1, inj2).(inj1 : comp_providedInterfaces(C_sup) >-> comp_providedInterfaces(C_sub) & !(int).(int : interface &  int : comp_providedInterfaces(C_sup) => inj1(int) : int_substitution['[{int}]'/]) & inj2 : comp_requiredInterfaces(C_sub) >-> comp_requiredInterfaces(C_sup) & !(int).(int : interface &  int : comp_requiredInterfaces(C_sub) => int : int_substitution['[{inj2(int)}]'/]) & (inj1 /= {} or inj2 /= {})))) &
    
    role_compatible : compRole <-> compRole  &
    !(C1, C2).(C1 : compRole & C2 : compRole & C1 /= C2 =>
        ((C1, C2) : role_compatible <=> #(int1, int2).(int1 : interface & int1 : comp_interfaces(C1) & int2 : interface & int2 : comp_interfaces(C2) & (int1, int2) : int_compatible))) &
    
    specification <: ARCH_SPEC &
    /*spec_components <: arch_components &
    (dom(arch_components) - dom(spec_components)) /\ specification = {} &
    (ran(arch_components) - ran(spec_components)) /\ POW(compRole) = {} &*/
    spec_connections <: arch_connections &
    (dom(arch_connections) - dom(spec_connections)) /\ specification = {} &
    spec_components : specification --> POW(compRole) &
    !(cr1, cr2, A1).(cr1 : compRole & cr2 : compRole & cr1 /= cr2 & A1 : architecture & {cr1, cr2} <: spec_components(A1) => comp_name(cr1) /= comp_name(cr2)) &
    spec_clients : specification --> POW(client) &
    !(spec, cl).(spec : specification & cl : client =>
        (cl : spec_clients(spec) <=> #comp.(comp : compRole & comp : dom({cl}) & comp : spec_components(spec)))) &
    spec_servers : specification --> POW(server) &
    !(spec, se).(spec : specification & se : server =>
        (se : spec_servers(spec) <=> #comp.(comp : compRole & comp : dom({se}) & comp : spec_components(spec)))) &
    /*connection consistency conditions*/
    !(cl, spec).(cl : client & spec : specification & cl : spec_clients(spec)  => #(conn, se).(conn : connection & conn : spec_connections(spec) &
        se : server & se : spec_servers(spec) & conn = (cl|->se))) &
!(se, spec).(se : server & spec : specification & se : spec_servers(spec)  => #(conn, cl).(conn : connection & conn : spec_connections(spec) &
        cl : client & cl : spec_clients(spec) & conn = (cl|->se))) &
    !(conn, spec).(conn : connection & spec: specification & conn : spec_connections(spec) => #(cl, se).(cl : client & se : server & cl : spec_clients(spec) &
        se : spec_servers(spec) & conn=(cl|->se))) &
    !(cr, spec).(cr : compRole & spec : specification & cr : spec_components(spec) => #conn.(conn : connection & conn : spec_connections(spec) & cr : dom(dom({conn})) \/ dom(ran({conn})))) &
    /*completeness*/
    !(cr, spec).(cr : compRole & spec : specification & cr : spec_components(spec) => !cl.(cl : client & clientComponentElem(cl) = cr => cl : spec_clients(spec)))
    
DEFINITIONS

    /*all_connection(C1, C2) == {(C1,int1), (C2,int2)|C1:comp & C2 : comp & int1 : interface & int2 : interface & ((C1,int1) |-> (C2,int2)) : connection}*/
    comp_providedInterfaces(comp) == {int|int : interface & int : comp_interfaces(comp) & int_direction(int) = PROVIDED};
    comp_requiredInterfaces(comp) == {int|int : interface & int : comp_interfaces(comp) & int_direction(int) = REQUIRED};
    
    all_role_compatible == {c1, c2|c1 : compRole & c2 : compRole & c1/=c2 & #(int1, int2).(int1 : interface & int1 : comp_interfaces(c1) & int2 : interface & int2 : comp_interfaces(c2) & (int1, int2) : int_compatible)};
    
    all_role_substitution == {c1, c2|c1 : compRole & c2 : compRole & c1 /= c2 & #(inj1, inj2).(inj1 : comp_providedInterfaces(c1) >-> comp_providedInterfaces(c2) & !(int).(int : interface &  int : comp_providedInterfaces(c1)  => inj1(int) : int_substitution['[{int}]'/]) & inj2 : comp_requiredInterfaces(c2) >-> comp_requiredInterfaces(c1) & !(int).(int : interface &  int : comp_requiredInterfaces(c2) => int : int_substitution['[{inj2(int)}]'/]) & (inj1 /= {} or inj2 /= {}))};
     
     clientInterfaceElem == {cl, int|cl : client & #(comp, rint).(comp : component & rint : interface & cl = (comp,rint) & int = rint)};
     clientComponentElem == {cl, cr|cl : client & #(comp, rint).(comp : component & rint : interface & cl = (comp,rint) & cr = comp)};
     serverInterfaceElem == {se, int|se : server & #(comp, pint).(comp : component & pint : interface & se = (comp,pint) & int = pint)};
     serverComponentElem == {se, cr|se : server & #(comp, pint).(comp : component & pint : interface & se = (comp,pint) & cr = comp)};
     clients(comp) == {cl|comp: component & cl : client & clientComponentElem(cl) = comp};
     servers(comp) == {se|comp : component & se : server & serverComponentElem(se) = comp};
     
     architecture_consistency == !(cl, spec).(cl : client & spec : specification & cl : spec_clients(spec)  => #(conn, se).(conn : connection & conn : spec_connections(spec) &
        se : server & se : spec_servers(spec) & conn = (cl|->se))) &
!(se, spec).(se : server & spec : specification & se : spec_servers(spec)  => #(conn, cl).(conn : connection & conn : spec_connections(spec) &
        cl : client & cl : spec_clients(spec) & conn = (cl|->se))) &
    !(conn, spec).(conn : connection & spec: specification & conn : spec_connections(spec) => #(cl, se).(cl : client & se : server & cl : spec_clients(spec) &
        se : spec_servers(spec) & conn=(cl|->se))) &
    !(cr, spec).(cr : compRole & spec : specification & cr : spec_components(spec) => #conn.(conn : connection & conn : spec_connections(spec) & cr : dom(dom({conn})) \/ dom(ran({conn})))) &
    !(cr, spec).(cr : compRole & spec : specification & cr : spec_components(spec) => !cl.(cl : client & clientComponentElem(cl) = cr => cl : spec_clients(spec)))

INITIALISATION
    compRole := {
[if (self.repositories->notEmpty())]
[for (rep : Repository|self.repositories) separator(',') after(',')]
[for (c : CompRole|rep.eContents(CompRole)) separator(',')]
['s_cr'+c.id/]
[/for]
[/for]
[/if]
[for (cr : CompRole|self.eContents(Specification).specComponents) separator(',')]
['cr'+cr.id/]
[/for]
} ||
    role_substitution := {} ||
    specification := {[for (spec : Specification|self.eContents(Specification)) separator(',')]
[spec.name/]
[/for]} ||
    spec_components := {
[for (spec : Specification|self.eContents(Specification)) separator(',')]
[spec.name+'|->'/]
[for (cr : CompRole|spec.specComponents) before('{') separator(',') after('}')]
['cr'+cr.id/]
[/for]
[/for]
} ||
    spec_connections := {
[for (spec : Specification|self.eContents(Specification)) separator(',')]
[spec.name+'|->{'/]
[for (con : RoleConnection|spec.specConnections) separator(',') after('}')]
['((cr'+con.clientCompElem.id+'|->'+con.clientIntElem.name+')'+'|->(cr'+con.serverCompElem.id+'|->'+con.serverIntElem.name+'))'/]
[/for]
[/for]
} ||
    spec_clients := {
[for (spec : Specification|self.eContents(Specification)) separator(',')]
[spec.name+'|->{'/]
[for (con : RoleConnection|spec.specConnections) separator(',') after('}')]
['(cr'+con.clientCompElem.id+'|->'+con.clientIntElem.name+')'/]
[/for]
[/for]
} ||
    spec_servers := {
[for (spec : Specification|self.eContents(Specification)) separator(',')]
[spec.name+'|->{'/]
[for (con : RoleConnection|spec.specConnections) separator(',') after('}')]
['(cr'+con.serverCompElem.id+'|->'+con.serverIntElem.name+')'/]
[/for]
[/for]
} ||
    role_compatible := {}

OPERATIONS
    
    initialzeArchSpecModel =
    BEGIN
        role_substitution := all_role_substitution ||
        role_compatible := all_role_compatible
    END;
    s_initializeParameterSubtype =
    BEGIN
        initializeParameterSubtype
    END;
    s_initializesignatureSubtype =
    BEGIN
        initializesignatureSubtype
    END;
    s_initializeInterfaceSubtype =
   BEGIN
        initializeInterfaceSubtype
    END;
    s_initializeBasicModel =
    BEGIN
        initializeBasicModel
    END;
    s_initializeArchModel =
    BEGIN
        initializeArchModel
    END;
    
    s_initializeConnections =
    BEGIN
        initializeConnections
    END;

   addRole(spec, newRole) =
   PRE
   spec : specification & newRole : compRole & newRole /: spec_components(spec) &
   !cr.(cr : compRole & cr : spec_components(spec) => comp_name(cr) /= comp_name(newRole)) 
   THEN
       spec_components(spec) := spec_components(spec) \/ {newRole} ||
       spec_servers(spec) := spec_servers(spec) \/ servers(newRole) ||
       spec_clients(spec) := spec_clients(spec) \/ clients(newRole)
   END;

   connect(cl, se, spec) =
   PRE
       spec : specification & cl : client & se : server & cl : spec_clients(spec) & se : spec_servers(spec) &
       (cl|->se) : connection & (cl|->se) /: spec_connections(spec) 
       /*(cl|->se) /: (deletedConnections \/ addedConnections) &
       changeOperation /= none*/
   THEN
       spec_connections(spec) := spec_connections(spec) \/ {(cl|->se)}
   END;

   removeRole(spec, role) =
   PRE
       spec : specification & role : compRole & role : spec_components(spec) &
       !cl.(cl : client & cl : clients(role) => !se.(se : server & se : spec_servers(spec) => (cl|->se) /: spec_connections(spec))) &
       !(se).(se : server & se : servers(role) => !cl.(cl : client & cl : spec_clients(spec) => (cl|->se) /: spec_connections(spec)))
   THEN
       spec_clients(spec) := spec_clients(spec) - clients(role) ||
       spec_servers(spec) := spec_servers(spec) - servers(role) ||
       spec_components(spec) := spec_components(spec) - {role}
   END;
   
   disconnect(spec, se, cl) =
   PRE
       spec : specification & cl : client & se : server & cl : spec_clients(spec) & se : spec_servers(spec) &
       (cl|->se) : connection & (cl|->se) : spec_connections(spec)
       /*& (cl|->se) /: (deletedConnections \/ addedConnections) & changeOperation /= none*/
   THEN
        spec_connections(spec) := spec_connections(spec) - {(cl|->se)}
        /*deletedConnections := deletedConnections \/ {(cl|->se)}*/
   END;
   
   replaceRole(spec, oldRole, newRole) =
   PRE
       oldRole : compRole & newRole : compRole & spec : specification & oldRole : spec_components(spec) & 
       newRole /: spec_components(spec) & (oldRole, newRole) : role_substitution & 
       !cl.(cl : client & cl : clients(oldRole) => !se.(se : server & se : spec_servers(spec) => (cl|->se) /: spec_connections(spec))) &
       !(se).(se : server & se : servers(oldRole) => !cl.(cl : client & cl : spec_clients(spec) => (cl|->se) /: spec_connections(spec)))
   THEN
       spec_components(spec) := (spec_components(spec) - {oldRole}) \/ {newRole} ||
       spec_servers(spec) := (spec_servers(spec) - servers(oldRole)) \/ servers(newRole) ||
       spec_clients(spec) := (spec_clients(spec) - clients(oldRole)) \/ clients(newRole)
   END;

   init_replaceRole(spec, oldRole, newRole) =
   PRE
       oldRole : compRole & newRole : compRole & spec : specification & oldRole : spec_components(spec) & 
       newRole /: spec_components(spec) & (oldRole, newRole) : role_substitution
   THEN
       spec_components(spec) := (spec_components(spec) - {oldRole}) \/ {newRole} ||
       spec_clients(spec) := (spec_clients(spec) - clients(oldRole))  \/ clients(newRole)||
       spec_servers(spec) := (spec_servers(spec) - servers(oldRole))  \/ servers(newRole) ||
       spec_connections(spec) := spec_connections(spec) - ({cl,se|cl : client & se : server & clientComponentElem(cl) = oldRole & (cl|->se) : spec_connections(spec)} \/
           {cl,se|cl : client & se : server & serverComponentElem(se) = oldRole & (cl|->se) : spec_connections(spec)})
   END;
   
   init_deleteRole(spec, role) =
   PRE
       spec : specification & role : compRole & role : spec_components(spec)
   THEN
       spec_components(spec) := spec_components(spec) - {role} ||
       spec_clients(spec) := spec_clients(spec) - clients(role) ||
       spec_servers(spec) := spec_servers(spec) - servers(role) ||
       spec_connections(spec) := spec_connections(spec) - ({cl,se|cl : client & se : server & clientComponentElem(cl) = role & (cl|->se) : spec_connections(spec)} \/
           {cl,se|cl : client & se : server & serverComponentElem(se) = role & (cl|->se) : spec_connections(spec)})
   END
END




[/file]
[/template]
