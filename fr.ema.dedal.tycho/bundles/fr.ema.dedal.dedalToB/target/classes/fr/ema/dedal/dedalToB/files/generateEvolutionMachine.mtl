[comment encoding = UTF-8 /]
[module generateEvolutionMachine('http://www.dedal.fr/metamodel')]


[template public generateEvolutionMachine(aDedalDiagram : DedalDiagram)]

[file ('EvolutionManager.mch', false, 'UTF-8')]

MACHINE
    EvolutionManager
INCLUDES
    Arch_specification,
    Arch_configuration,
    Arch_assembly
SETS
    CHANGE_LEVEL = {eLevel, specLevel, configLevel, asmLevel}
VARIABLES
    changeLevel,
    /*variables related to specification*/
    addedRoles, deletedRoles, addedConnections, deletedConnections, selectedArch,
    /*variables related to configuration*/
    addedClassConnections, deletedClassConnections, addedServers, deletedServers, addedClasses, deletedClasses,
    selectedConfig,
    /*variables related to assembly*/
    deletedInstConnections, addedInstConnections, addedInstances, deletedInstances, selectedAsm,
    addedServerInstances, deletedServerInstances,
    /*initialisation variables*/
    init1, init2, init3, init4, init5, init6, init7, init8, init9, init10, init11, init12,
    initialisation
INVARIANT
    
    changeLevel : CHANGE_LEVEL &
    /*variables related to specification*/
    addedRoles <: compRole &
    deletedRoles <: compRole &
    addedConnections <: connection &
    deletedConnections <: connection &
    selectedArch : ARCH_SPEC &
    /*variables related to configuration*/
    addedClassConnections <: connection &
    deletedClassConnections <: connection &
    addedServers <: server &
    deletedServers <: server &
    addedClasses <: compClass &
    deletedClasses <: compClass &
    selectedConfig : CONFIGURATIONS &
    /*variables related to assembly*/
    deletedInstConnections <: binding &
    addedInstConnections <: binding &
    addedInstances <: compInstance & 
    deletedInstances <: compInstance &
    selectedAsm : ASSEMBLIES & 
    addedServerInstances <: server_instance &
    deletedServerInstances <: server_instance &
    /*initialisation variables*/
    init1 : BOOL & init2 : BOOL & init3 : BOOL & init4: BOOL & init5 : BOOL & init6 : BOOL & init7 : BOOL &
    init8 : BOOL & init9 : BOOL & init10 : BOOL & init11 : BOOL & init12 : BOOL &
    initialisation : BOOL
DEFINITIONS
    
    comp_providedInterfaces(comp) == {int|int : interface & int : comp_interfaces(comp) & int_direction(int) = PROVIDED};
    comp_requiredInterfaces(comp) == {int|int : interface & int : comp_interfaces(comp) & int_direction(int) = REQUIRED};
    
    /*definitions related to roles*/
    clientInterfaceElem == {cl, int|cl : client & #(comp, rint).(comp : component & rint : interface & cl = (comp,rint) & int = rint)};
     clientComponentElem == {cl, cr|cl : client & #(comp, rint).(comp : component & rint : interface & cl = (comp,rint) & cr = comp)};
     serverInterfaceElem == {se, int|se : server & #(comp, pint).(comp : component & pint : interface & se = (comp,pint) & int = pint)};
     serverComponentElem == {se, cr|se : server & #(comp, pint).(comp : component & pint : interface & se = (comp,pint) & cr = comp)};
     roleClients(role) == {cl|role: component & cl : client & clientComponentElem(cl) = role};
     roleServers(role) == {se|role : component & se : server & serverComponentElem(se) = role};
     
     specification_consistency == !(cl, spec).(cl : client & spec : specification & cl : spec_clients(spec)  => #(conn, se).(conn : connection & conn : spec_connections(spec) &
        se : server & se : spec_servers(spec) & conn = (cl|->se))) &
!(se, spec).(se : server & spec : specification & se : spec_servers(spec)  => #(conn, cl).(conn : connection & conn : spec_connections(spec) &
        cl : client & cl : spec_clients(spec) & conn = (cl|->se))) &
    !(conn, spec).(conn : connection & spec: specification  & conn : spec_connections(spec) => #(cl, se).(cl : client & se : server & cl : spec_clients(spec) &
        se : spec_servers(spec) & conn=(cl|->se))) &
    !(cr, spec).(cr : compRole & spec : specification & cr : spec_components(spec) => #conn.(conn : connection & conn : spec_connections(spec) & cr : dom(dom({conn})) \/ dom(ran({conn})))) &
    !(cr, spec).(cr : compRole & spec : specification & cr : spec_components(spec) => !cl.(cl : client & clientComponentElem(cl) = cr => cl : spec_clients(spec))) &
    !(cr, spec).(cr : compRole & spec : specification & cr : spec_components(spec) => !se.(se : server & serverComponentElem(se) = cr => se : spec_servers(spec)));
    
     /*definitions related to classes*/
     class_interfaces(cl) == comp_interfaces(class_implements(cl));
    classClients(class) == {cl|class : compClass & cl : client & clientComponentElem(cl) = class_implements(class)};
    classServers(class) == {se|class : compClass & se : server & serverComponentElem(se) = class_implements(class)};
    class_substitution == (class_implements ; compType_substitution ; class_implements~);
    
    config_consistency == !(cl, config).(cl : client & config : configuration & cl : config_clients(config)  => #(conn, se).(conn : connection & conn : config_connections(config) &
        se : server & se : config_servers(config) & conn = (cl|->se))) &
!(se, config).(se : server & config : configuration  & se : config_servers(config)  => #(conn, cl).(conn : connection & conn : config_connections(config) &
        cl : client & cl : config_clients(config) & conn = (cl|->se))) &
    !(conn, config).(conn : connection & config : configuration  & conn : config_connections(config) => #(cl, se).(cl : client & se : server & cl : config_clients(config) &
        se : config_servers(config) & conn=(cl|->se))) &
    !(class, config).(class : compClass & config : configuration   & class : config_components(config) => #conn.(conn : connection & conn : config_connections(config) & class_implements(class) : dom(dom({conn})) \/ dom(ran({conn})))) &
    !(class, config).(class : compClass & config : configuration   & class : config_components(config) => !cl.(cl : client & clientComponentElem(cl) = class_implements(class) => cl : config_clients(config))) &
     !(class1, class2, config).(class1 : compClass & class2 : compClass & config : configuration & {class1,class2} <: config_components(config) => ((class1, class2) /: class_substitution & (class2, class1) /: class_substitution));
    
    /*definitions related to instances*/
    inst_direction(int) == int_direction(int_instantiates(int));
    serverInterfaceInstElem == {se, int|se : server_instance & #(inst, pint).(inst : compInstance & pint : interfaceInstance & se = (inst,pint) & int = pint)};
    clientInstanceElem == {cl, inst|inst : compInstance & cl : client_instance & #(ci, rint).(ci : compInstance & rint : interfaceInstance & cl = (ci,rint) & ci = inst)};
    serverInstanceElem == {se, inst|inst : compInstance & se : server_instance & #(ci, pint).(ci : compInstance & pint : interfaceInstance & se = (ci,pint) & ci = inst)};
    instanceClients(inst) == {cl|inst : compInstance & cl : client_instance & clientInstanceElem(cl) = inst};
    instanceServers(inst) == {se|inst : compInstance & se : server_instance & serverInstanceElem(se) = inst};
    inst_substitution == (comp_instantiates;class_implements ; compType_substitution ; class_implements~;comp_instantiates~);
    
    assembly_consistency == !(cl, asm).(cl : client_instance & asm : assembly & cl : assm_clients(asm)  => #(conn, se).(conn : binding & conn : assm_connections(asm) &
        se : server_instance & se : assm_servers(asm) & conn = (cl|->se))) &
!(se, asm).(se : server_instance & asm : assembly &  se : assm_servers(asm)  => #(conn, cl).(conn : binding & conn : assm_connections(asm) &
        cl : client_instance & cl : assm_clients(asm) & conn = (cl|->se))) &
    !(conn, asm).(conn : binding & asm : assembly & conn : assm_connections(asm) => #(cl, se).(cl : client_instance & se : server_instance & cl : assm_clients(asm) &
        se : assm_servers(asm) & conn=(cl|->se))) &
    !(inst, asm).(inst : compInstance & asm : assembly & inst : assm_components(asm) => #conn.(conn : binding & conn : assm_connections(asm) & inst : dom(dom({conn})) \/ dom(ran({conn})))) &
    !(inst, asm).(inst : compInstance & asm : assembly & inst : assm_components(asm) => !cl.(cl : client_instance & clientInstanceElem(cl) = inst => cl : assm_clients(asm)));
    
    /*coherence property*/
    specConfigCoherence == !(spec, config).(spec : specification & config : configuration => ((config, spec) : implements <=> !CR.(CR : compRole & CR : spec_components(spec) => #CL.(CL : compClass & CL : config_components(config) & (CL,CR) : realizes))) & (spec, config) : documents <=> !se1.(se1 : server & se1 : config_servers(config) => #se2.(se2 : server & se2 : spec_servers(spec) & (serverInterfaceElem(se2), serverInterfaceElem(se1)) : int_substitution)));
    configAssemblyCoherence == !(asm, config).(asm: assembly & config : configuration => (
           (asm, config) : instantiates <=> (!cl.(cl : compClass & cl : config_components(config) => #ci.(ci : compInstance & ci : assm_components(asm) & (ci, cl) : comp_instantiates))
               &
               (!ci.(ci : compInstance & ci : assm_components(asm) => #cl.(cl : compClass & cl : config_components(config) & (ci, cl) : comp_instantiates))))));
       
    coherence == specConfigCoherence & configAssemblyCoherence;
     
    /*specification evolution rules preconditions*/
    roleAdditionPrecondition == spec : specification & newRole : compRole & newRole /: spec_components(spec)  &
        !cr.(cr : compRole & cr : spec_components(spec) => comp_name(cr) /= comp_name(newRole)) ;
    roleConnectionPrecondition == spec : specification & cl : client & se : server & cl : spec_clients(spec) & se : spec_servers(spec) &
       (cl|->se) : connection & (cl|->se) /: spec_connections(spec) & !se1.(se1 : server & se1 : spec_servers(spec) => (cl|->se1) /: spec_connections(spec)) &
       !cl2.(cl2 : client & cl2 : spec_clients(spec) => (cl2|->se) /: spec_connections(spec));
    roleDeletionPrecondition == spec : specification & role : compRole & role : spec_components(spec) &
       !cl.(cl : client & cl : roleClients(role) => !se.(se : server & se : spec_servers(spec) => (cl|->se) /: spec_connections(spec))) &
       !(se).(se : server & se : roleServers(role) => !cl.(cl : client & cl : spec_clients(spec) => (cl|->se) /: spec_connections(spec)));
    roleDisconnectionPrecondition == spec : specification & cl : client & se : server & cl : spec_clients(spec) & se : spec_servers(spec) &
       (cl|->se) : connection & (cl|->se) : spec_connections(spec);   
    roleSubstitutionPrecondition == oldRole : compRole & newRole : compRole & spec : specification & oldRole : spec_components(spec) & 
    newRole /: spec_components(spec) & (oldRole, newRole) : role_substitution & 
       !cl.(cl : client & cl : roleClients(oldRole) => !se.(se : server & se : spec_servers(spec) => (cl|->se) /: spec_connections(spec))) &
       !se.(se : server & se : roleServers(oldRole) => !cl.(cl : client & cl : spec_clients(spec) => (cl|->se) /: spec_connections(spec)));
    roleInitSubstitutionPrecondition == oldRole : compRole & newRole : compRole & spec : specification & oldRole : spec_components(spec) & 
       newRole /: spec_components(spec) & (oldRole, newRole) : role_substitution;
    roleInitDeletionPrecondition == spec : specification & role : compRole & role : spec_components(spec);
    /*configuration evolution rules preconditions*/
    classInitAdditionPrecondition == config : configuration & newClass : compClass & newClass /: config_components(config) &
       !cl.(cl : compClass & cl : config_components(config) => class_name(cl) /= class_name(newClass) & class_implements(newClass) /= class_implements(cl)) & 
       services <: server & services <: classServers(newClass);
    classAdditionPrecondition == config : configuration & newClass : compClass & newClass /: config_components(config) &
    !cl.(cl : compClass & cl : config_components(config) => class_name(cl) /= class_name(newClass) & class_implements(newClass) /= class_implements(cl));
    serverAdditionPrecondition == config : configuration & se : server & se /: config_servers(config) & serverComponentElem(se) : class_implements['[config_components(config)]'/];
    serverDeletionPrecondition == config : configuration & se : server & se : config_servers(config) & !cl.(cl : client & cl : config_clients(config) =>
           (cl|->se) /: config_connections(config));
    classConnectionPrecondition == config : configuration & cl : client & se : server & cl : config_clients(config) & se : config_servers(config) &
       (cl|->se) : connection & (cl|->se) /: config_connections(config);
    classDeletionPrecondition == config : configuration & class : compClass & class : config_components(config) &
       !cl.(cl : client & cl : classClients(class) => !se.(se : server & se : config_servers(config) => (cl|->se) /: config_connections(config))) &
       !se.(se : server & se : classServers(class) => se /: config_servers(config));
    classDisconnectionPrecondition == config : configuration & cl : client & se : server & cl : config_clients(config) & se : config_servers(config) &
    (cl|->se) : connection & (cl|->se) : config_connections(config);
    classSubstitutionPrecondition == oldClass : compClass & newClass : compClass & config : configuration & oldClass : config_components(config) & 
       newClass /: config_components(config) & (oldClass, newClass) : class_substitution & 
       !cl.(cl : client & cl : classClients(oldClass) => !se.(se : server & se : config_servers(config) => (cl|->se) /: config_connections(config))) &
       !(se).(se : server & se : classServers(oldClass) => se /: config_servers(config));
    classInitSubstitutionPrecondition == oldClass : compClass & newClass : compClass & config : configuration & oldClass : config_components(config) & 
       newClass /: config_components(config) & (oldClass, newClass) : class_substitution & services <: server & 
       !se.(se : server & se : services => se : classServers(newClass)) &
       !se1.(se1 : server & se1 : classServers(oldClass) => #se2.(se2 : server & se2 : services & serverInterfaceElem(se2) : int_substitution['[{serverInterfaceElem(se1)}]'/]));
    classInitDeletionPrecondition == config : configuration & class : compClass & class : config_components(config);
    /*assembly evolution preconditions*/
    instanceInitAdditionPrecondition == asm : assembly & class : compClass & 
        inst : compInstance & class = comp_instantiates(inst) & inst /: assm_components(asm) &
        services <: server_instance & services <: instanceServers(inst) &
        nb_instances(class) < max_instances(class);
    instanceAdditionPrecondition == asm : assembly & class : compClass & inst : compInstance & class = comp_instantiates(inst) & inst /: assm_components(asm) &
        nb_instances(class) < max_instances(class);
    serverInstanceAdditionPrecondition == asm : assembly & se : server_instance & se /: assm_servers(asm) & serverInstanceElem(se) : assm_components(asm);
    instanceBindingPrecondition == asm : assembly & cl : client_instance & se : server_instance & cl : assm_clients(asm) & se : assm_servers(asm) &
    (cl|->se) : binding & (cl|->se) /: assm_connections(asm);
    serverInstanceDeletionPrecondition == asm : assembly & se : server_instance & se : assm_servers(asm) & !cl.(cl : client_instance & cl : assm_clients(asm) =>
           (cl|->se) /: assm_connections(asm));
    instanceDeletionPrecondition == asm : assembly & inst : compInstance & inst : assm_components(asm) & class : compClass & class = comp_instantiates(inst) &
       !cl.(cl : client_instance & cl : instanceClients(inst) => !se.(se : server_instance & se : assm_servers(asm) => (cl|->se) /: assm_connections(asm))) &
       !se.(se : server_instance & se : instanceServers(inst) => se /: assm_servers(asm));
    instanceUnbindigPrecondition == asm : assembly & cl : client_instance & se : server_instance & cl : assm_clients(asm) & se : assm_servers(asm) &
    (cl|->se) : binding & (cl|->se) : assm_connections(asm);
    instanceSubstitutionPrecondition == oldInst : compInstance & newInst : compInstance & asm : assembly & oldInst : assm_components(asm) & 
       newInst /: assm_components(asm) & (oldInst, newInst) : inst_substitution & 
       !cl.(cl : client_instance & cl : instanceClients(oldInst) => !se.(se : server_instance & se : assm_servers(asm) => (cl|->se) /: assm_connections(asm))) &
       !(se).(se : server_instance & se : instanceServers(oldInst) => se /: assm_servers(asm));
    instanceInitSubstitutionPrecondition == oldInst : compInstance & newInst : compInstance & asm : assembly & oldInst : assm_components(asm) & 
       newInst /: assm_components(asm) & (oldInst, newInst) : inst_substitution & 
       !se1.(se1 : server_instance & se1 : instanceServers(oldInst) => #se2.(se2 : server_instance & se2 : instanceServers(newInst) & int_instantiates(serverInterfaceInstElem(se2)) : int_substitution['[{int_instantiates(serverInterfaceInstElem(se1))}]'/]));
    instanceInitDeletionPrecondition ==  asm : assembly & inst : compInstance & inst : assm_components(asm) & class : compClass & class = comp_instantiates(inst)
    
       
INITIALISATION
       
    changeLevel := eLevel ||
    /*variables related to specification*/
    addedRoles := {} ||
    deletedRoles := {} ||
    addedConnections := {} ||
    deletedConnections := {} ||
    selectedArch := eArch ||
    /*variables related to configuration*/
    addedClassConnections := {} ||
    deletedClassConnections := {} ||
    addedServers := {} ||
    deletedServers := {} ||
    addedClasses := {} ||
    deletedClasses := {} ||
    selectedConfig := eConfig ||
    /*variables related to assembly*/
    deletedInstConnections := {} ||
    addedInstConnections := {} ||
    addedInstances := {} ||
    deletedInstances := {} ||
    selectedAsm := eAssm || 
    addedServerInstances := {} ||
    deletedServerInstances := {} ||
    /*initialisation variables*/
    init1 := TRUE ||
    init2 := FALSE ||
    init3 := FALSE ||
    init4 := FALSE ||
    init5 := FALSE ||
    init6 := FALSE ||
    init7 := FALSE ||
    init8 := FALSE ||
    init9 := FALSE ||
    init10 := FALSE ||
    init11 := FALSE ||
    init12 := FALSE ||
    initialisation := FALSE
OPERATIONS
    
    /*initializations*/
    mng_initializeParameterSubtype =
    PRE
        init1=TRUE
    THEN
        s_initializeParameterSubtype ||
        init1:=FALSE ||
        init2 := TRUE
    END;
    mng_initializesignatureSubtype =
    PRE
        init2 = TRUE
    THEN
        
        s_initializesignatureSubtype ||
        init2 := FALSE ||
        init3 := TRUE
    END;
    
    mng_initializeInterfaceSubtype =
    PRE
        init3 = TRUE
    THEN
        s_initializeInterfaceSubtype ||
        init3 := FALSE ||
        init4 := TRUE
    END;
    mng_initializeBasicModel =
    PRE
        init4 = TRUE
    THEN
        s_initializeBasicModel ||
        init4 := FALSE ||
        init5 := TRUE
    END;
    
    mng_initializeArchModel =
    PRE
        init5 = TRUE
    THEN
        s_initializeArchModel ||
        init5 := FALSE ||
        init6 := TRUE
    END;
    
    mng_initializeConnections =
    PRE
        init6 = TRUE
    THEN
        s_initializeConnections ||
        init6 := FALSE ||
        init7 := TRUE
    END;
    
    mng_initialzeArchSpecModel =
    PRE
        init7 = TRUE
    THEN
        initialzeArchSpecModel ||
        init7 := FALSE ||
        init8 := TRUE
    END;
    
    mng_initializeArchConfig =
    PRE
        init8 = TRUE
    THEN
        initializeArchConfig ||
        init8 := FALSE ||
        init9 := TRUE
    END;
    
    mng_computeRealizations =
    PRE
        init9 = TRUE
    THEN
        computeRealizations ||
        init9 := FALSE ||
        init10 := TRUE
    END;
    
    mng_initializeArchAssembly =
    PRE
        init10 = TRUE
    THEN
        initializeArchAssembly ||
        init10 := FALSE ||
        init11 := TRUE 
    END;
    
    mng_initializeBindings =
    PRE
        init11 = TRUE
    THEN
        initializeBindings ||
        init11 := FALSE ||
        init12 := TRUE 
    END;
    
    /*set architecture descriptions*/
    
    mng_setTargetArchitectures(spec, config, assm) =
    PRE
        spec : specification & config : configuration & assm : assembly &
        init12 = TRUE
    THEN
        selectedArch := spec ||
        selectedConfig := config ||
        selectedAsm := assm ||
        init12 := FALSE ||
        initialisation := TRUE
    END;
    
    /*set change level*/
    setChangeLevel(newChangeLevel) =
    PRE
        initialisation = TRUE & newChangeLevel : CHANGE_LEVEL & newChangeLevel /= eLevel & changeLevel /= newChangeLevel
    THEN
        changeLevel := newChangeLevel
    END;
    
    /*spec evolution rules*/
   
    changeArtifact <-- spec_addRole(spec, newRole) =
    PRE
        initialisation = TRUE &
        changeLevel = specLevel &
        roleAdditionPrecondition &
        selectedArch = spec &
        newRole /: (deletedRoles \/ addedRoles)
    THEN
       addRole(spec, newRole) ||
       addedRoles := addedRoles \/ {newRole} ||
       changeArtifact := newRole
    END;
    
    artifact1,artifact2 <-- spec_connect(cl, se, spec) =
    PRE
        initialisation = TRUE &
        changeLevel = specLevel &
        selectedArch = spec &
        roleConnectionPrecondition &
        (cl|->se) /: (deletedConnections \/ addedConnections)
    THEN
        connect(cl, se, spec) ||
        addedConnections := addedConnections \/ {(cl|->se)}||
        artifact1 := clientComponentElem(cl) ||
        artifact2 := serverComponentElem(se) 
    END;
    
    spec_removeRole(spec, role) =
    PRE
        initialisation = TRUE &
        changeLevel = specLevel &  
        roleDeletionPrecondition &
        selectedArch = spec &
        role /: (deletedRoles \/ addedRoles)
    THEN
        removeRole(spec, role) ||
        deletedRoles := deletedRoles \/ {role}
    END;
    
    artifact1, artifact2 <-- spec_disconnect(spec, se, cl) =
    PRE
        initialisation = TRUE &
       changeLevel = specLevel & roleDisconnectionPrecondition &
       selectedArch = spec &
       (cl|->se) /: (deletedConnections \/ addedConnections)
    THEN
        disconnect(spec, se, cl) ||
        deletedConnections := deletedConnections \/ {(cl|->se)} ||
        artifact1 := clientComponentElem(cl) ||
        artifact2 := serverComponentElem(se)
    END;
    
    changeArtifact <-- spec_replaceRole(spec, oldRole, newRole) =
    PRE
       initialisation = TRUE &
       changeLevel = specLevel & 
       roleSubstitutionPrecondition &
       selectedArch = spec &
       oldRole /: (deletedRoles \/ addedRoles) & newRole /: (deletedRoles \/ addedRoles)
    THEN
        replaceRole(spec, oldRole, newRole) ||
        deletedRoles := deletedRoles \/ {oldRole} ||
        addedRoles := addedRoles \/ {newRole} ||
        changeArtifact := newRole
    END;
    
    /*configuration evolution rules*/
    
    changeArtifact <-- config_addClass(config, newClass) =
    PRE
        initialisation = TRUE &
        changeLevel = configLevel & 
        classAdditionPrecondition &
        newClass /: (deletedClasses \/ addedClasses) &
        selectedConfig = config
    THEN
        addClass(config, newClass) ||
        addedClasses := addedClasses \/ {newClass} ||
        changeArtifact := class_implements(newClass) 
    END;
    
    changeArtifact <-- config_addServer(config, se) =
    PRE
        initialisation = TRUE &
        changeLevel = configLevel & 
        serverAdditionPrecondition &
        se /: (addedServers \/ deletedServers) &
        selectedConfig = config
    THEN
       addServer(config, se) ||
       addedServers := addedServers \/ {se} ||
       changeArtifact := serverComponentElem(se)
    END;
    
    artifact1, artifact2 <-- config_class_connect(cl, se, config) =
    PRE
        initialisation = TRUE &
        changeLevel = configLevel & 
        classConnectionPrecondition &
        (cl|->se) /: (deletedConnections \/ addedConnections) &
        selectedConfig = config
    THEN
        class_connect(cl, se, config) ||
        addedConnections := addedConnections \/ {(cl|->se)}||
        artifact1 := clientComponentElem(cl) ||
        artifact2 := serverComponentElem(se)
    END;
    
   changeArtifact <-- config_deleteServer(config, se) =
   PRE
       initialisation = TRUE &
       changeLevel = configLevel & 
       serverDeletionPrecondition &
        se /: (addedServers \/ deletedServers) &
        selectedConfig = config
   THEN
       deleteServer(config, se) ||
       deletedServers := deletedServers \/ {se} ||
       changeArtifact := serverComponentElem(se)
   END;
    
    config_removeClass(config, class) =
    PRE
        initialisation = TRUE &
       changeLevel = configLevel & 
       classDeletionPrecondition &
       class /: (deletedClasses \/ addedClasses) &
       selectedConfig = config
    THEN
        removeClass(config, class) ||
        deletedClasses := deletedClasses \/ {class}
    END;
    
    artifact1, artifact2 <-- config_class_disconnect(config, se, cl) =
    PRE
        initialisation = TRUE &
        changeLevel = configLevel & 
       classDisconnectionPrecondition & 
       (cl|->se) /: (deletedConnections \/ addedConnections) &
       selectedConfig = config
    THEN
        class_disconnect(config, se, cl) ||
        deletedConnections := deletedConnections \/ {(cl|->se)} ||
        artifact1 := clientComponentElem(cl) ||
        artifact2 := serverComponentElem(se)
    END;
    
    changeArtifact <-- config_replaceClass(config, oldClass, newClass) =
    PRE
        initialisation = TRUE &
        changeLevel = configLevel & 
        classSubstitutionPrecondition &
        oldClass /: (deletedClasses \/ addedClasses) & newClass /: (deletedClasses \/ addedClasses) &
        selectedConfig = config
    THEN
         replaceClass(config, oldClass, newClass) ||
         deletedClasses := deletedClasses \/ {oldClass} ||
         addedClasses := addedClasses \/ {newClass} ||
         changeArtifact := newClass
    END;
    
    /*Assembly evolution rules*/
    
    changeArtifact <-- asm_deployInstance(asm, inst, class) =
    PRE
        initialisation = TRUE &
        changeLevel = asmLevel & 
        instanceAdditionPrecondition &
        inst /: (addedInstances \/ deletedInstances) &
        selectedAsm = asm
    THEN
        deployInstance(asm, inst, class) ||
        addedInstances := addedInstances \/ {inst} ||
        changeArtifact := inst
    END;
    
    changeArtifact <-- asm_addServerInstance(asm, se) =
    PRE
        initialisation = TRUE &
       changeLevel = asmLevel & 
       selectedAsm = asm & 
       serverInstanceAdditionPrecondition &
       se /: (addedServerInstances \/ deletedServerInstances) 
   THEN
       addServerInstance(asm, se) ||
       addedServerInstances := addedServerInstances \/ {se} ||
       changeArtifact := serverInstanceElem(se)
   END;
    
    artifact1, artifact2 <-- asm_bind(cl, se, asm) =
    PRE
        initialisation = TRUE &
        changeLevel = asmLevel &
        instanceBindingPrecondition &
       (cl|->se) /: (deletedInstConnections \/ addedInstConnections) &
       selectedAsm = asm
    THEN
        bind(cl, se, asm) ||
        addedInstConnections := addedInstConnections \/ {(cl|->se)} ||
        artifact1 := clientInstanceElem(cl) ||
        artifact2 := serverInstanceElem(se)
    END;
    
   asm_removeInstance(asm, inst, class) =
   PRE
       initialisation = TRUE &
       changeLevel = asmLevel & 
       instanceDeletionPrecondition & 
       inst /: (deletedInstances \/ addedInstances) &
       selectedAsm = asm
   THEN
       removeInstance(asm, inst, class) ||
       deletedInstances := deletedInstances \/ {inst}
   END;
   
   artifact1, artifact2 <-- asm_unbind(asm, se, cl) =
   PRE
       initialisation = TRUE &
       changeLevel = asmLevel & 
       instanceUnbindigPrecondition &
       (cl|->se) /: (deletedInstConnections \/ addedInstConnections) & 
       selectedAsm = asm
   THEN
       unbind(asm, se, cl) ||
       deletedInstConnections := deletedInstConnections \/ {(cl|->se)} ||
       artifact1 := clientInstanceElem(cl) ||
       artifact2 := serverInstanceElem(se)
   END;
   
   changeArtifact <-- asm_deleteServerInstance(asm, se) =
    PRE
        initialisation = TRUE &
        changeLevel = asmLevel & 
        selectedAsm = asm & 
         serverInstanceDeletionPrecondition &
         se /: (addedServerInstances \/ deletedServerInstances)
   THEN
       deleteServerInstance(asm, se) ||
       deletedServerInstances := deletedServerInstances \/ {se} ||
       changeArtifact := serverInstanceElem(se) 
   END;
   
   changeArtifact <-- asm_replaceInstance(asm, oldInst, newInst) =
   PRE
       initialisation = TRUE &
       instanceSubstitutionPrecondition &
       changeLevel = asmLevel &
       oldInst /: (deletedInstances \/ addedInstances) & newInst /: (deletedInstances \/ addedInstances) &
       selectedAsm = asm
   THEN
       replaceInstance(asm, oldInst, newInst) ||
       addedInstances := addedInstances \/ {newInst} ||
       deletedInstances := deletedInstances \/ {oldInst} ||
       changeArtifact := newInst
   END

END


[/file]
[/template]
