//-------------------------------------------------------------------------------
// Copyright (C) 2019 IMT Mines Al√®s
// 
// This program and the accompanying materials are made
// available under the terms of the Eclipse Public License 2.0
// which is available at https://www.eclipse.org/legal/epl-2.0/
// 
// SPDX-License-Identifier: EPL-2.0
//-------------------------------------------------------------------------------
/*
 * generated by Xtext
 */
package fr.ema.dedal.xtext.formatting

import com.google.inject.Inject
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import fr.ema.dedal.xtext.services.DedalADLGrammarAccess

/**
 * This class contains custom formatting declarations.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormatter} as an example
 */
public class DedalADLFormatter extends AbstractDeclarativeFormatter {

	@Inject extension DedalADLGrammarAccess

	override protected configureFormatting(FormattingConfig c) {
		for (pair : findKeywordPairs('(', ')')) {
			c.setIndentation(pair.first, pair.second)
			c.setLinewrap(1).after(pair.first)
			c.setLinewrap(1).before(pair.second)
			c.setLinewrap(1).after(pair.second)
		}
		for (dot : findKeywords('.')) {
			c.setNoLinewrap().before(dot)
			c.setNoSpace().before(dot)
			c.setNoSpace().after(dot)
		}
		for (semicolumn : findKeywords(';')) {
			c.setNoLinewrap().before(semicolumn)
			c.setNoSpace().before(semicolumn)
			c.setLinewrap().after(semicolumn)
		}
		for (item : findKeywords('dedal_diagram')) {
			c.setIndentationIncrement.after(item)
		}
		for (compinsts : findKeywords('component_instances')) {
			c.setLinewrap().before(compinsts)
		}
		for (compinst : findKeywords('component_instance')) {
			c.setLinewrap().before(compinst)
//			c.setIndentationIncrement
		}
		for (instCon : findKeywords('instance_connection')) {
			c.setLinewrap().before(instCon)
//			c.setIndentationIncrement.after(instCon)
		}
		for (item : findKeywords('specification','configuration','assembly','repository','components', 'interface_types',
			'type','primitive_component_class','component_type','component_instance','assembly_connections','instance_connection',
			'component_instances','configConnections','class_connection','connection','component_role','connections'
		)) {
			c.setLinewrap(2,2,2).before(item)
		}
		for (item : findKeywords('client')) {
			c.setIndentationIncrement.before(item)
			c.setLinewrap.before(item)
		}
		for (item : findKeywords('server')) {
			c.setLinewrap.before(item)
			c.setIndentationDecrement.after(item)
		}
		for (item : findKeywords('id', 'instance_of', 'implements', 'interfaces', 'component_interfaces')) {
			c.setLinewrap.before(item)
			c.setIndentationIncrement.before(item)
			c.setIndentationDecrement.after(item)
		}
		for (item : findKeywords('interface')) {
			c.setLinewrap.before(item)
			c.setIndentationIncrement.before(item)
			c.setIndentationIncrement.before(item)
			c.setIndentationDecrement.after(item)
			c.setIndentationDecrement.after(item)
		}
		for (item : findKeywords('interface_direction', 'implementation', 'instantiates')) {
			c.setLinewrap.before(item)
			c.setIndentationIncrement.before(item)
			c.setIndentationIncrement.before(item)
			c.setIndentationIncrement.before(item)
			c.setIndentationDecrement.after(item)
			c.setIndentationDecrement.after(item)
			c.setIndentationDecrement.after(item)
		}
		for (item : findKeywords('architecture_descriptions', 'repositories')) {
			c.setLinewrap(2, 2, 2).before(item)
//			c.setIndentation(item, item)
		}
//		for(item: findKeywords('assembly'))
//		{
//			c.setLinewrap.before(item)
//		}
//		for (pair : findKeywordPairs('configuration', 'assembly')) {
//			c.setLinewrap.before(pair.first)
//			c.setIndentationIncrement.after(pair.first)
//			c.setIndentationDecrement.before(pair.second)
//			c.setIndentationIncrement.after(pair.first)
//		}
//		for (pair : findKeywordPairs('specification', 'configuration')) {
//			c.setLinewrap.before(pair.first)
//			c.setIndentationIncrement.after(pair.first)
//			c.setIndentationDecrement.before(pair.second)
//			c.setIndentationIncrement.after(pair.first)
//		}
		for (item : findKeywordPairs('configConnections', ')')) {
//			c.setIndentation(item.first, item.second);
			c.setLinewrap.before(item.first)
			c.setIndentationIncrement.before(item.first)
			c.setIndentationDecrement.after(item.second)
		}
		for (item : findKeywordPairs('component_instances', ')')) {
//			c.setIndentation(item.first, item.second);
			c.setLinewrap.before(item.first)
			c.setIndentationIncrement.before(item.first)
			c.setIndentationDecrement.after(item.second)
		}
		for (item : findKeywordPairs('assembly_connections', ')')) {
//			c.setIndentation(item.first, item.second);
			c.setLinewrap.before(item.first)
			c.setIndentationIncrement.before(item.first)
			c.setIndentationDecrement.after(item.second)
		}
		for (item : findKeywordPairs('components', ')')) {
//			c.setIndentation(item.first, item.second);
			c.setLinewrap.before(item.first)
			c.setIndentationIncrement.before(item.first)
			c.setIndentationDecrement.after(item.second)
		}
		for (item : findKeywordPairs('attributes', ')')) {
//			c.setIndentation(item.first, item.second);
			c.setLinewrap.before(item.first)
			c.setIndentationIncrement.before(item.first)
			c.setIndentationDecrement.after(item.second)
		}
		for (item : findKeywordPairs('signatures', ')')) {
//			c.setIndentation(item.first, item.second);
			c.setLinewrap.before(item.first)
			c.setIndentationIncrement.before(item.first)
			c.setIndentationDecrement.after(item.second)
		}
		for (item : findKeywordPairs('component_instance', ')')) {
//			c.setIndentation(item.first, item.second);
			c.setLinewrap.before(item.first)
			c.setIndentationIncrement.before(item.first)
			c.setIndentationDecrement.after(item.second)
		}
		for (item : findKeywordPairs('component_interfaces', 'component_instance')) {
//			c.setIndentation(item.first, item.second);
			c.setLinewrap.before(item.first)
			c.setIndentationIncrement.before(item.first)
			c.setIndentationDecrement.after(item.second)
		}
//		for (item : findKeywordPairs('interface', 'component_instance')) {
////			c.setIndentation(item.first, item.second);
//			c.setLinewrap.before(item.first)
//			c.setIndentationIncrement.before(item.first)
//			c.setIndentationDecrement.after(item.second)
//		}
//		for (item : findKeywordPairs('interface', 'interface')) {
////			c.setIndentation(item.first, item.second);
//			c.setLinewrap.before(item.first)
//			c.setIndentationIncrement.before(item.first)
//			c.setIndentationDecrement.after(item.second)
//		}
		c.setLinewrap(0, 1, 2).before(SL_COMMENTRule)
		c.setLinewrap(0, 1, 2).before(ML_COMMENTRule)
		c.setLinewrap(0, 1, 1).after(ML_COMMENTRule)
	}

}
