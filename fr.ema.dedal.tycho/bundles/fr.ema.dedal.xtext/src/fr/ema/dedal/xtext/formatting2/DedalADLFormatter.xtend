//-------------------------------------------------------------------------------
// Copyright (C) 2019 IMT Mines Al√®s
// 
// This program and the accompanying materials are made
// available under the terms of the Eclipse Public License 2.0
// which is available at https://www.eclipse.org/legal/epl-2.0/
// 
// SPDX-License-Identifier: EPL-2.0
//-------------------------------------------------------------------------------
/*
 * generated by Xtext
 */
package fr.ema.dedal.xtext.formatting2;

import com.google.inject.Inject;
import dedal.ArchitectureDescription;
import dedal.Assembly;
import dedal.Attribute;
import dedal.ClassConnection;
import dedal.CompClass;
import dedal.CompInstance;
import dedal.CompRole;
import dedal.CompType;
import dedal.Component;
import dedal.CompositeCompClass;
import dedal.Configuration;
import dedal.DedalDiagram;
import dedal.InstConnection;
import dedal.Interaction;
import dedal.InterfaceType;
import dedal.Parameter;
import dedal.Repository;
import dedal.RoleConnection;
import dedal.Signature;
import dedal.Specification;
import fr.ema.dedal.xtext.services.DedalADLGrammarAccess;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;

class DedalADLFormatter extends AbstractFormatter2 {
	
	@Inject extension DedalADLGrammarAccess

	def dispatch void format(DedalDiagram dedaldiagram, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (ArchitectureDescription architectureDescriptions : dedaldiagram.getArchitectureDescriptions()) {
			format(architectureDescriptions, document);
		}
		for (Repository repositories : dedaldiagram.getRepositories()) {
			format(repositories, document);
		}
	}

	def dispatch void format(Repository repository, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Component components : repository.getComponents()) {
			format(components, document);
		}
		for (InterfaceType interfaceTypes : repository.getInterfaceTypes()) {
			format(interfaceTypes, document);
		}
	}

	def dispatch void format(InterfaceType interfacetype, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Signature signatures : interfacetype.getSignatures()) {
			format(signatures, document);
		}
	}

	def dispatch void format(Signature signature, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Parameter parameters : signature.getParameters()) {
			format(parameters, document);
		}
	}

	def dispatch void format(Specification specification, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (CompRole specComponents : specification.getSpecComponents()) {
			format(specComponents, document);
		}
		for (RoleConnection specConnections : specification.getSpecConnections()) {
			format(specConnections, document);
		}
		for (InterfaceType interfaceTypes : specification.getInterfaceTypes()) {
			format(interfaceTypes, document);
		}
	}

	def dispatch void format(CompRole comprole, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Interaction compInterfaces : comprole.getCompInterfaces()) {
			format(compInterfaces, document);
		}
	}

	def dispatch void format(Configuration configuration, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (CompClass configComponents : configuration.getConfigComponents()) {
			format(configComponents, document);
		}
		for (InterfaceType interfaceTypes : configuration.getInterfaceTypes()) {
			format(interfaceTypes, document);
		}
		for (CompType comptypes : configuration.getComptypes()) {
			format(comptypes, document);
		}
		for (ClassConnection configConnections : configuration.getConfigConnections()) {
			format(configConnections, document);
		}
	}

	def dispatch void format(CompType comptype, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Interaction compInterfaces : comptype.getCompInterfaces()) {
			format(compInterfaces, document);
		}
	}

	def dispatch void format(CompClass compclass, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Attribute attributes : compclass.getAttributes()) {
			format(attributes, document);
		}
		for (Interaction compInterfaces : compclass.getCompInterfaces()) {
			format(compInterfaces, document);
		}
	}

	def dispatch void format(CompositeCompClass compositecompclass, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Attribute attributes : compositecompclass.getAttributes()) {
			format(attributes, document);
		}
		for (Interaction compInterfaces : compositecompclass.getCompInterfaces()) {
			format(compInterfaces, document);
		}
	}

	def dispatch void format(Assembly assembly, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (CompInstance assmComponents : assembly.getAssmComponents()) {
			format(assmComponents, document);
		}
		for (InterfaceType interfaceTypes : assembly.getInterfaceTypes()) {
			format(interfaceTypes, document);
		}
		for (InstConnection assemblyConnections : assembly.getAssemblyConnections()) {
			format(assemblyConnections, document);
		}
	}

	def dispatch void format(CompInstance compinstance, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Interaction compInterfaces : compinstance.getCompInterfaces()) {
			format(compInterfaces, document);
		}
	}
}
