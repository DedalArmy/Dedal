/*
 * generated by Xtext
 */
package fr.ema.dedal.xtext.serializer;

import com.google.inject.Inject;
import fr.ema.dedal.xtext.services.DedalADLGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public abstract class AbstractDedalADLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DedalADLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Assembly___Assembly_constraintsKeyword_11_0_LeftParenthesisKeyword_11_1_ConstraintParserRuleCall_11_2___SemicolonKeyword_11_3_0_ConstraintParserRuleCall_11_3_1__a_RightParenthesisKeyword_11_4__q;
	protected AbstractElementAlias match_Assembly___ByKeyword_13_0_ChangeParserRuleCall_13_1__q;
	protected AbstractElementAlias match_Assembly___LeftParenthesisKeyword_4_0_REVISION_NUMBTerminalRuleCall_4_1_RightParenthesisKeyword_4_2__q;
	protected AbstractElementAlias match_Assembly___Pre_versionKeyword_12_0_VersionParserRuleCall_12_1__q;
	protected AbstractElementAlias match_Assembly___VersionIDKeyword_5_0_REVISION_NUMBTerminalRuleCall_5_1__q;
	protected AbstractElementAlias match_CompClass_Impl___Pre_versionKeyword_10_0_REVISION_NUMBTerminalRuleCall_10_1__q;
	protected AbstractElementAlias match_CompClass_Impl___VersionIDKeyword_9_0_REVISION_NUMBTerminalRuleCall_9_1__q;
	protected AbstractElementAlias match_CompositeCompClass___Delegated_interfacesKeyword_7_0_Delegated_interface_listParserRuleCall_7_1__q;
	protected AbstractElementAlias match_CompositeCompClass___LeftParenthesisKeyword_6_2_0_REVISION_NUMBTerminalRuleCall_6_2_1_RightParenthesisKeyword_6_2_2__q;
	protected AbstractElementAlias match_CompositeCompClass___Pre_versionKeyword_10_0_REVISION_NUMBTerminalRuleCall_10_1__q;
	protected AbstractElementAlias match_CompositeCompClass___VersionIDKeyword_9_0_REVISION_NUMBTerminalRuleCall_9_1__q;
	protected AbstractElementAlias match_Configuration___ByKeyword_5_0_ChangeParserRuleCall_5_1__q;
	protected AbstractElementAlias match_Configuration___Connector_classesKeyword_7_0_Connector_classParserRuleCall_7_1_AsKeyword_7_2_Connection_nameParserRuleCall_7_3___SemicolonKeyword_7_4_0_Connector_classParserRuleCall_7_4_1_AsKeyword_7_4_2_Connection_nameParserRuleCall_7_4_3__a__q;
	protected AbstractElementAlias match_Configuration___LeftParenthesisKeyword_2_2_0_REVISION_NUMBTerminalRuleCall_2_2_1_RightParenthesisKeyword_2_2_2__q;
	protected AbstractElementAlias match_Configuration___Pre_versionKeyword_4_0_Pre_versionParserRuleCall_4_1__q;
	protected AbstractElementAlias match_Configuration___VersionIDKeyword_3_0_REVISION_NUMBTerminalRuleCall_3_1__q;
	protected AbstractElementAlias match_Specification___ByKeyword_8_0_ChangeParserRuleCall_8_1__q;
	protected AbstractElementAlias match_Specification___Pre_versionKeyword_7_0_Pre_versionParserRuleCall_7_1__q;
	protected AbstractElementAlias match_Specification___VersionIDKeyword_6_0_REVISION_NUMBTerminalRuleCall_6_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DedalADLGrammarAccess) access;
		match_Assembly___Assembly_constraintsKeyword_11_0_LeftParenthesisKeyword_11_1_ConstraintParserRuleCall_11_2___SemicolonKeyword_11_3_0_ConstraintParserRuleCall_11_3_1__a_RightParenthesisKeyword_11_4__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAssemblyAccess().getAssembly_constraintsKeyword_11_0()), new TokenAlias(false, false, grammarAccess.getAssemblyAccess().getLeftParenthesisKeyword_11_1()), new TokenAlias(false, false, grammarAccess.getAssemblyAccess().getConstraintParserRuleCall_11_2()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getAssemblyAccess().getSemicolonKeyword_11_3_0()), new TokenAlias(false, false, grammarAccess.getAssemblyAccess().getConstraintParserRuleCall_11_3_1())), new TokenAlias(false, false, grammarAccess.getAssemblyAccess().getRightParenthesisKeyword_11_4()));
		match_Assembly___ByKeyword_13_0_ChangeParserRuleCall_13_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAssemblyAccess().getByKeyword_13_0()), new TokenAlias(false, false, grammarAccess.getAssemblyAccess().getChangeParserRuleCall_13_1()));
		match_Assembly___LeftParenthesisKeyword_4_0_REVISION_NUMBTerminalRuleCall_4_1_RightParenthesisKeyword_4_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAssemblyAccess().getLeftParenthesisKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getAssemblyAccess().getREVISION_NUMBTerminalRuleCall_4_1()), new TokenAlias(false, false, grammarAccess.getAssemblyAccess().getRightParenthesisKeyword_4_2()));
		match_Assembly___Pre_versionKeyword_12_0_VersionParserRuleCall_12_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAssemblyAccess().getPre_versionKeyword_12_0()), new TokenAlias(false, false, grammarAccess.getAssemblyAccess().getVersionParserRuleCall_12_1()));
		match_Assembly___VersionIDKeyword_5_0_REVISION_NUMBTerminalRuleCall_5_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAssemblyAccess().getVersionIDKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getAssemblyAccess().getREVISION_NUMBTerminalRuleCall_5_1()));
		match_CompClass_Impl___Pre_versionKeyword_10_0_REVISION_NUMBTerminalRuleCall_10_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCompClass_ImplAccess().getPre_versionKeyword_10_0()), new TokenAlias(false, false, grammarAccess.getCompClass_ImplAccess().getREVISION_NUMBTerminalRuleCall_10_1()));
		match_CompClass_Impl___VersionIDKeyword_9_0_REVISION_NUMBTerminalRuleCall_9_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCompClass_ImplAccess().getVersionIDKeyword_9_0()), new TokenAlias(false, false, grammarAccess.getCompClass_ImplAccess().getREVISION_NUMBTerminalRuleCall_9_1()));
		match_CompositeCompClass___Delegated_interfacesKeyword_7_0_Delegated_interface_listParserRuleCall_7_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCompositeCompClassAccess().getDelegated_interfacesKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getCompositeCompClassAccess().getDelegated_interface_listParserRuleCall_7_1()));
		match_CompositeCompClass___LeftParenthesisKeyword_6_2_0_REVISION_NUMBTerminalRuleCall_6_2_1_RightParenthesisKeyword_6_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCompositeCompClassAccess().getLeftParenthesisKeyword_6_2_0()), new TokenAlias(false, false, grammarAccess.getCompositeCompClassAccess().getREVISION_NUMBTerminalRuleCall_6_2_1()), new TokenAlias(false, false, grammarAccess.getCompositeCompClassAccess().getRightParenthesisKeyword_6_2_2()));
		match_CompositeCompClass___Pre_versionKeyword_10_0_REVISION_NUMBTerminalRuleCall_10_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCompositeCompClassAccess().getPre_versionKeyword_10_0()), new TokenAlias(false, false, grammarAccess.getCompositeCompClassAccess().getREVISION_NUMBTerminalRuleCall_10_1()));
		match_CompositeCompClass___VersionIDKeyword_9_0_REVISION_NUMBTerminalRuleCall_9_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getCompositeCompClassAccess().getVersionIDKeyword_9_0()), new TokenAlias(false, false, grammarAccess.getCompositeCompClassAccess().getREVISION_NUMBTerminalRuleCall_9_1()));
		match_Configuration___ByKeyword_5_0_ChangeParserRuleCall_5_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getByKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getChangeParserRuleCall_5_1()));
		match_Configuration___Connector_classesKeyword_7_0_Connector_classParserRuleCall_7_1_AsKeyword_7_2_Connection_nameParserRuleCall_7_3___SemicolonKeyword_7_4_0_Connector_classParserRuleCall_7_4_1_AsKeyword_7_4_2_Connection_nameParserRuleCall_7_4_3__a__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getConnector_classesKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getConnector_classParserRuleCall_7_1()), new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getAsKeyword_7_2()), new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getConnection_nameParserRuleCall_7_3()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getSemicolonKeyword_7_4_0()), new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getConnector_classParserRuleCall_7_4_1()), new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getAsKeyword_7_4_2()), new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getConnection_nameParserRuleCall_7_4_3())));
		match_Configuration___LeftParenthesisKeyword_2_2_0_REVISION_NUMBTerminalRuleCall_2_2_1_RightParenthesisKeyword_2_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getLeftParenthesisKeyword_2_2_0()), new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getREVISION_NUMBTerminalRuleCall_2_2_1()), new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getRightParenthesisKeyword_2_2_2()));
		match_Configuration___Pre_versionKeyword_4_0_Pre_versionParserRuleCall_4_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getPre_versionKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getPre_versionParserRuleCall_4_1()));
		match_Configuration___VersionIDKeyword_3_0_REVISION_NUMBTerminalRuleCall_3_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getVersionIDKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getConfigurationAccess().getREVISION_NUMBTerminalRuleCall_3_1()));
		match_Specification___ByKeyword_8_0_ChangeParserRuleCall_8_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSpecificationAccess().getByKeyword_8_0()), new TokenAlias(false, false, grammarAccess.getSpecificationAccess().getChangeParserRuleCall_8_1()));
		match_Specification___Pre_versionKeyword_7_0_Pre_versionParserRuleCall_7_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSpecificationAccess().getPre_versionKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getSpecificationAccess().getPre_versionParserRuleCall_7_1()));
		match_Specification___VersionIDKeyword_6_0_REVISION_NUMBTerminalRuleCall_6_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getSpecificationAccess().getVersionIDKeyword_6_0()), new TokenAlias(false, false, grammarAccess.getSpecificationAccess().getREVISION_NUMBTerminalRuleCall_6_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getConstraintRule())
			return getConstraintToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getREVISION_NUMBRule())
			return getREVISION_NUMBToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getChangeRule())
			return getchangeToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getConnection_nameRule())
			return getconnection_nameToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getConnector_classRule())
			return getconnector_classToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDelegated_interface_listRule())
			return getdelegated_interface_listToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPre_versionRule())
			return getpre_versionToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getVersionRule())
			return getversionToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Constraint:
	 * 	 'expression' constraint_expression
	 * ;
	 */
	protected String getConstraintToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "expression!";
	}
	
	/**
	 * terminal REVISION_NUMB:
	 * 	('1'..'9')('0'..'9')*'.'('0'..'9')+
	 * ;
	 */
	protected String getREVISION_NUMBToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ".";
	}
	
	/**
	 * change :
	 * 	'change' ID
	 * 	'time' change_time
	 * 	'level' initial_level
	 * 	'operation' change_operation
	 * 	'artifact' architecture_element 'is' EString
	 * 	'purpose' change_purpose
	 * 	'origin' change_origin ('from' change)?
	 * ;
	 */
	protected String getchangeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "changetimestaticlevelspecificationoperationadditionartifactcomponent_roleis\"\"purposecorrectiveorigingiven";
	}
	
	/**
	 * connection_name:
	 * 	ID
	 * ;
	 */
	protected String getconnection_nameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * connector_class:
	 * 	'connector' connector_class_name
	 * 	'implements' connector_type
	 * 	;
	 */
	protected String getconnector_classToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "connectorimplementsconnector_typeprovided_interfacesrequired_interfaces";
	}
	
	/**
	 * delegated_interface_list:
	 * 	'provided' | 'required' inner_interface 'as' outer_interface
	 * 	(';' 'provided' | 'required' inner_interface 'as' outer_interface)*
	 * ;
	 */
	protected String getdelegated_interface_listToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "provided";
	}
	
	/**
	 * pre_version:
	 * 	ID? '(' REVISION_NUMB ')'
	 * ;
	 */
	protected String getpre_versionToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "(.)";
	}
	
	/**
	 * version:
	 * 	ID '(' REVISION_NUMB ')'
	 * ;
	 */
	protected String getversionToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "(.)";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Assembly___Assembly_constraintsKeyword_11_0_LeftParenthesisKeyword_11_1_ConstraintParserRuleCall_11_2___SemicolonKeyword_11_3_0_ConstraintParserRuleCall_11_3_1__a_RightParenthesisKeyword_11_4__q.equals(syntax))
				emit_Assembly___Assembly_constraintsKeyword_11_0_LeftParenthesisKeyword_11_1_ConstraintParserRuleCall_11_2___SemicolonKeyword_11_3_0_ConstraintParserRuleCall_11_3_1__a_RightParenthesisKeyword_11_4__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Assembly___ByKeyword_13_0_ChangeParserRuleCall_13_1__q.equals(syntax))
				emit_Assembly___ByKeyword_13_0_ChangeParserRuleCall_13_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Assembly___LeftParenthesisKeyword_4_0_REVISION_NUMBTerminalRuleCall_4_1_RightParenthesisKeyword_4_2__q.equals(syntax))
				emit_Assembly___LeftParenthesisKeyword_4_0_REVISION_NUMBTerminalRuleCall_4_1_RightParenthesisKeyword_4_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Assembly___Pre_versionKeyword_12_0_VersionParserRuleCall_12_1__q.equals(syntax))
				emit_Assembly___Pre_versionKeyword_12_0_VersionParserRuleCall_12_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Assembly___VersionIDKeyword_5_0_REVISION_NUMBTerminalRuleCall_5_1__q.equals(syntax))
				emit_Assembly___VersionIDKeyword_5_0_REVISION_NUMBTerminalRuleCall_5_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CompClass_Impl___Pre_versionKeyword_10_0_REVISION_NUMBTerminalRuleCall_10_1__q.equals(syntax))
				emit_CompClass_Impl___Pre_versionKeyword_10_0_REVISION_NUMBTerminalRuleCall_10_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CompClass_Impl___VersionIDKeyword_9_0_REVISION_NUMBTerminalRuleCall_9_1__q.equals(syntax))
				emit_CompClass_Impl___VersionIDKeyword_9_0_REVISION_NUMBTerminalRuleCall_9_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CompositeCompClass___Delegated_interfacesKeyword_7_0_Delegated_interface_listParserRuleCall_7_1__q.equals(syntax))
				emit_CompositeCompClass___Delegated_interfacesKeyword_7_0_Delegated_interface_listParserRuleCall_7_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CompositeCompClass___LeftParenthesisKeyword_6_2_0_REVISION_NUMBTerminalRuleCall_6_2_1_RightParenthesisKeyword_6_2_2__q.equals(syntax))
				emit_CompositeCompClass___LeftParenthesisKeyword_6_2_0_REVISION_NUMBTerminalRuleCall_6_2_1_RightParenthesisKeyword_6_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CompositeCompClass___Pre_versionKeyword_10_0_REVISION_NUMBTerminalRuleCall_10_1__q.equals(syntax))
				emit_CompositeCompClass___Pre_versionKeyword_10_0_REVISION_NUMBTerminalRuleCall_10_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CompositeCompClass___VersionIDKeyword_9_0_REVISION_NUMBTerminalRuleCall_9_1__q.equals(syntax))
				emit_CompositeCompClass___VersionIDKeyword_9_0_REVISION_NUMBTerminalRuleCall_9_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Configuration___ByKeyword_5_0_ChangeParserRuleCall_5_1__q.equals(syntax))
				emit_Configuration___ByKeyword_5_0_ChangeParserRuleCall_5_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Configuration___Connector_classesKeyword_7_0_Connector_classParserRuleCall_7_1_AsKeyword_7_2_Connection_nameParserRuleCall_7_3___SemicolonKeyword_7_4_0_Connector_classParserRuleCall_7_4_1_AsKeyword_7_4_2_Connection_nameParserRuleCall_7_4_3__a__q.equals(syntax))
				emit_Configuration___Connector_classesKeyword_7_0_Connector_classParserRuleCall_7_1_AsKeyword_7_2_Connection_nameParserRuleCall_7_3___SemicolonKeyword_7_4_0_Connector_classParserRuleCall_7_4_1_AsKeyword_7_4_2_Connection_nameParserRuleCall_7_4_3__a__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Configuration___LeftParenthesisKeyword_2_2_0_REVISION_NUMBTerminalRuleCall_2_2_1_RightParenthesisKeyword_2_2_2__q.equals(syntax))
				emit_Configuration___LeftParenthesisKeyword_2_2_0_REVISION_NUMBTerminalRuleCall_2_2_1_RightParenthesisKeyword_2_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Configuration___Pre_versionKeyword_4_0_Pre_versionParserRuleCall_4_1__q.equals(syntax))
				emit_Configuration___Pre_versionKeyword_4_0_Pre_versionParserRuleCall_4_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Configuration___VersionIDKeyword_3_0_REVISION_NUMBTerminalRuleCall_3_1__q.equals(syntax))
				emit_Configuration___VersionIDKeyword_3_0_REVISION_NUMBTerminalRuleCall_3_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Specification___ByKeyword_8_0_ChangeParserRuleCall_8_1__q.equals(syntax))
				emit_Specification___ByKeyword_8_0_ChangeParserRuleCall_8_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Specification___Pre_versionKeyword_7_0_Pre_versionParserRuleCall_7_1__q.equals(syntax))
				emit_Specification___Pre_versionKeyword_7_0_Pre_versionParserRuleCall_7_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Specification___VersionIDKeyword_6_0_REVISION_NUMBTerminalRuleCall_6_1__q.equals(syntax))
				emit_Specification___VersionIDKeyword_6_0_REVISION_NUMBTerminalRuleCall_6_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('assembly_constraints' '(' Constraint (';' Constraint)* ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     assmComponents+=CompInstance ')' (ambiguity) ('pre_version' version)? ('by' change)? 'assembly_connections' '(' assemblyConnections+=InstConnection
	 *     assmComponents+=CompInstance ')' (ambiguity) ('pre_version' version)? ('by' change)? 'interface_types' '(' interfaceTypes+=InterfaceType
	 *     assmComponents+=CompInstance ')' (ambiguity) ('pre_version' version)? ('by' change)? (rule end)
	 */
	protected void emit_Assembly___Assembly_constraintsKeyword_11_0_LeftParenthesisKeyword_11_1_ConstraintParserRuleCall_11_2___SemicolonKeyword_11_3_0_ConstraintParserRuleCall_11_3_1__a_RightParenthesisKeyword_11_4__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('by' change)?
	 *
	 * This ambiguous syntax occurs at:
	 *     assmComponents+=CompInstance ')' ('assembly_constraints' '(' Constraint (';' Constraint)* ')')? ('pre_version' version)? (ambiguity) 'assembly_connections' '(' assemblyConnections+=InstConnection
	 *     assmComponents+=CompInstance ')' ('assembly_constraints' '(' Constraint (';' Constraint)* ')')? ('pre_version' version)? (ambiguity) 'interface_types' '(' interfaceTypes+=InterfaceType
	 *     assmComponents+=CompInstance ')' ('assembly_constraints' '(' Constraint (';' Constraint)* ')')? ('pre_version' version)? (ambiguity) (rule end)
	 */
	protected void emit_Assembly___ByKeyword_13_0_ChangeParserRuleCall_13_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' REVISION_NUMB ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     instantiates=[Configuration|EString] (ambiguity) ('versionID' REVISION_NUMB)? 'component_instances' '(' assmComponents+=CompInstance
	 */
	protected void emit_Assembly___LeftParenthesisKeyword_4_0_REVISION_NUMBTerminalRuleCall_4_1_RightParenthesisKeyword_4_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('pre_version' version)?
	 *
	 * This ambiguous syntax occurs at:
	 *     assmComponents+=CompInstance ')' ('assembly_constraints' '(' Constraint (';' Constraint)* ')')? (ambiguity) ('by' change)? 'assembly_connections' '(' assemblyConnections+=InstConnection
	 *     assmComponents+=CompInstance ')' ('assembly_constraints' '(' Constraint (';' Constraint)* ')')? (ambiguity) ('by' change)? 'interface_types' '(' interfaceTypes+=InterfaceType
	 *     assmComponents+=CompInstance ')' ('assembly_constraints' '(' Constraint (';' Constraint)* ')')? (ambiguity) ('by' change)? (rule end)
	 */
	protected void emit_Assembly___Pre_versionKeyword_12_0_VersionParserRuleCall_12_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('versionID' REVISION_NUMB)?
	 *
	 * This ambiguous syntax occurs at:
	 *     instantiates=[Configuration|EString] ('(' REVISION_NUMB ')')? (ambiguity) 'component_instances' '(' assmComponents+=CompInstance
	 */
	protected void emit_Assembly___VersionIDKeyword_5_0_REVISION_NUMBTerminalRuleCall_5_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('pre_version' REVISION_NUMB)?
	 *
	 * This ambiguous syntax occurs at:
	 *     attributes+=Attribute ')' ('versionID' REVISION_NUMB)? (ambiguity) 'interfaces' compInterfaces+=Interaction
	 *     attributes+=Attribute ')' ('versionID' REVISION_NUMB)? (ambiguity) (rule end)
	 *     content=[CompInstance|EString] ('versionID' REVISION_NUMB)? (ambiguity) 'interfaces' compInterfaces+=Interaction
	 *     content=[CompInstance|EString] ('versionID' REVISION_NUMB)? (ambiguity) (rule end)
	 *     implements=[CompType|EString] ('versionID' REVISION_NUMB)? (ambiguity) 'interfaces' compInterfaces+=Interaction
	 *     implements=[CompType|EString] ('versionID' REVISION_NUMB)? (ambiguity) (rule end)
	 */
	protected void emit_CompClass_Impl___Pre_versionKeyword_10_0_REVISION_NUMBTerminalRuleCall_10_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('versionID' REVISION_NUMB)?
	 *
	 * This ambiguous syntax occurs at:
	 *     attributes+=Attribute ')' (ambiguity) ('pre_version' REVISION_NUMB)? 'interfaces' compInterfaces+=Interaction
	 *     attributes+=Attribute ')' (ambiguity) ('pre_version' REVISION_NUMB)? (rule end)
	 *     content=[CompInstance|EString] (ambiguity) ('pre_version' REVISION_NUMB)? 'interfaces' compInterfaces+=Interaction
	 *     content=[CompInstance|EString] (ambiguity) ('pre_version' REVISION_NUMB)? (rule end)
	 *     implements=[CompType|EString] (ambiguity) ('pre_version' REVISION_NUMB)? 'interfaces' compInterfaces+=Interaction
	 *     implements=[CompType|EString] (ambiguity) ('pre_version' REVISION_NUMB)? (rule end)
	 */
	protected void emit_CompClass_Impl___VersionIDKeyword_9_0_REVISION_NUMBTerminalRuleCall_9_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('delegated_interfaces' delegated_interface_list)?
	 *
	 * This ambiguous syntax occurs at:
	 *     implements=[CompType|EString] (ambiguity) 'attributes' '(' attributes+=Attribute
	 *     implements=[CompType|EString] (ambiguity) ('versionID' REVISION_NUMB)? ('pre_version' REVISION_NUMB)? 'delegated_old' delegatedInterfaces+=[Interaction|ID]
	 *     implements=[CompType|EString] (ambiguity) ('versionID' REVISION_NUMB)? ('pre_version' REVISION_NUMB)? 'interfaces' compInterfaces+=Interaction
	 *     implements=[CompType|EString] (ambiguity) ('versionID' REVISION_NUMB)? ('pre_version' REVISION_NUMB)? 'realizes' '(' realizes+=[CompRole|EString]
	 *     implements=[CompType|EString] (ambiguity) ('versionID' REVISION_NUMB)? ('pre_version' REVISION_NUMB)? (rule end)
	 *     uses=[Configuration|EString] ('(' REVISION_NUMB ')')? (ambiguity) 'attributes' '(' attributes+=Attribute
	 *     uses=[Configuration|EString] ('(' REVISION_NUMB ')')? (ambiguity) ('versionID' REVISION_NUMB)? ('pre_version' REVISION_NUMB)? 'delegated_old' delegatedInterfaces+=[Interaction|ID]
	 *     uses=[Configuration|EString] ('(' REVISION_NUMB ')')? (ambiguity) ('versionID' REVISION_NUMB)? ('pre_version' REVISION_NUMB)? 'interfaces' compInterfaces+=Interaction
	 *     uses=[Configuration|EString] ('(' REVISION_NUMB ')')? (ambiguity) ('versionID' REVISION_NUMB)? ('pre_version' REVISION_NUMB)? 'realizes' '(' realizes+=[CompRole|EString]
	 *     uses=[Configuration|EString] ('(' REVISION_NUMB ')')? (ambiguity) ('versionID' REVISION_NUMB)? ('pre_version' REVISION_NUMB)? (rule end)
	 */
	protected void emit_CompositeCompClass___Delegated_interfacesKeyword_7_0_Delegated_interface_listParserRuleCall_7_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' REVISION_NUMB ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     uses=[Configuration|EString] (ambiguity) ('delegated_interfaces' delegated_interface_list)? 'attributes' '(' attributes+=Attribute
	 *     uses=[Configuration|EString] (ambiguity) ('delegated_interfaces' delegated_interface_list)? ('versionID' REVISION_NUMB)? ('pre_version' REVISION_NUMB)? 'delegated_old' delegatedInterfaces+=[Interaction|ID]
	 *     uses=[Configuration|EString] (ambiguity) ('delegated_interfaces' delegated_interface_list)? ('versionID' REVISION_NUMB)? ('pre_version' REVISION_NUMB)? 'interfaces' compInterfaces+=Interaction
	 *     uses=[Configuration|EString] (ambiguity) ('delegated_interfaces' delegated_interface_list)? ('versionID' REVISION_NUMB)? ('pre_version' REVISION_NUMB)? 'realizes' '(' realizes+=[CompRole|EString]
	 *     uses=[Configuration|EString] (ambiguity) ('delegated_interfaces' delegated_interface_list)? ('versionID' REVISION_NUMB)? ('pre_version' REVISION_NUMB)? (rule end)
	 */
	protected void emit_CompositeCompClass___LeftParenthesisKeyword_6_2_0_REVISION_NUMBTerminalRuleCall_6_2_1_RightParenthesisKeyword_6_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('pre_version' REVISION_NUMB)?
	 *
	 * This ambiguous syntax occurs at:
	 *     attributes+=Attribute ')' ('versionID' REVISION_NUMB)? (ambiguity) 'delegated_old' delegatedInterfaces+=[Interaction|ID]
	 *     attributes+=Attribute ')' ('versionID' REVISION_NUMB)? (ambiguity) 'interfaces' compInterfaces+=Interaction
	 *     attributes+=Attribute ')' ('versionID' REVISION_NUMB)? (ambiguity) 'realizes' '(' realizes+=[CompRole|EString]
	 *     attributes+=Attribute ')' ('versionID' REVISION_NUMB)? (ambiguity) (rule end)
	 *     implements=[CompType|EString] ('delegated_interfaces' delegated_interface_list)? ('versionID' REVISION_NUMB)? (ambiguity) 'delegated_old' delegatedInterfaces+=[Interaction|ID]
	 *     implements=[CompType|EString] ('delegated_interfaces' delegated_interface_list)? ('versionID' REVISION_NUMB)? (ambiguity) 'interfaces' compInterfaces+=Interaction
	 *     implements=[CompType|EString] ('delegated_interfaces' delegated_interface_list)? ('versionID' REVISION_NUMB)? (ambiguity) 'realizes' '(' realizes+=[CompRole|EString]
	 *     implements=[CompType|EString] ('delegated_interfaces' delegated_interface_list)? ('versionID' REVISION_NUMB)? (ambiguity) (rule end)
	 *     uses=[Configuration|EString] ('(' REVISION_NUMB ')')? ('delegated_interfaces' delegated_interface_list)? ('versionID' REVISION_NUMB)? (ambiguity) 'delegated_old' delegatedInterfaces+=[Interaction|ID]
	 *     uses=[Configuration|EString] ('(' REVISION_NUMB ')')? ('delegated_interfaces' delegated_interface_list)? ('versionID' REVISION_NUMB)? (ambiguity) 'interfaces' compInterfaces+=Interaction
	 *     uses=[Configuration|EString] ('(' REVISION_NUMB ')')? ('delegated_interfaces' delegated_interface_list)? ('versionID' REVISION_NUMB)? (ambiguity) 'realizes' '(' realizes+=[CompRole|EString]
	 *     uses=[Configuration|EString] ('(' REVISION_NUMB ')')? ('delegated_interfaces' delegated_interface_list)? ('versionID' REVISION_NUMB)? (ambiguity) (rule end)
	 */
	protected void emit_CompositeCompClass___Pre_versionKeyword_10_0_REVISION_NUMBTerminalRuleCall_10_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('versionID' REVISION_NUMB)?
	 *
	 * This ambiguous syntax occurs at:
	 *     attributes+=Attribute ')' (ambiguity) ('pre_version' REVISION_NUMB)? 'delegated_old' delegatedInterfaces+=[Interaction|ID]
	 *     attributes+=Attribute ')' (ambiguity) ('pre_version' REVISION_NUMB)? 'interfaces' compInterfaces+=Interaction
	 *     attributes+=Attribute ')' (ambiguity) ('pre_version' REVISION_NUMB)? 'realizes' '(' realizes+=[CompRole|EString]
	 *     attributes+=Attribute ')' (ambiguity) ('pre_version' REVISION_NUMB)? (rule end)
	 *     implements=[CompType|EString] ('delegated_interfaces' delegated_interface_list)? (ambiguity) ('pre_version' REVISION_NUMB)? 'delegated_old' delegatedInterfaces+=[Interaction|ID]
	 *     implements=[CompType|EString] ('delegated_interfaces' delegated_interface_list)? (ambiguity) ('pre_version' REVISION_NUMB)? 'interfaces' compInterfaces+=Interaction
	 *     implements=[CompType|EString] ('delegated_interfaces' delegated_interface_list)? (ambiguity) ('pre_version' REVISION_NUMB)? 'realizes' '(' realizes+=[CompRole|EString]
	 *     implements=[CompType|EString] ('delegated_interfaces' delegated_interface_list)? (ambiguity) ('pre_version' REVISION_NUMB)? (rule end)
	 *     uses=[Configuration|EString] ('(' REVISION_NUMB ')')? ('delegated_interfaces' delegated_interface_list)? (ambiguity) ('pre_version' REVISION_NUMB)? 'delegated_old' delegatedInterfaces+=[Interaction|ID]
	 *     uses=[Configuration|EString] ('(' REVISION_NUMB ')')? ('delegated_interfaces' delegated_interface_list)? (ambiguity) ('pre_version' REVISION_NUMB)? 'interfaces' compInterfaces+=Interaction
	 *     uses=[Configuration|EString] ('(' REVISION_NUMB ')')? ('delegated_interfaces' delegated_interface_list)? (ambiguity) ('pre_version' REVISION_NUMB)? 'realizes' '(' realizes+=[CompRole|EString]
	 *     uses=[Configuration|EString] ('(' REVISION_NUMB ')')? ('delegated_interfaces' delegated_interface_list)? (ambiguity) ('pre_version' REVISION_NUMB)? (rule end)
	 */
	protected void emit_CompositeCompClass___VersionIDKeyword_9_0_REVISION_NUMBTerminalRuleCall_9_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('by' change)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         implements+=[Specification|EString] 
	 *         '(' 
	 *         REVISION_NUMB 
	 *         ')' 
	 *         ('versionID' REVISION_NUMB)? 
	 *         ('pre_version' pre_version)? 
	 *         (ambiguity) 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'component_types' 
	 *         '(' 
	 *         comptypes+=CompType
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         '(' 
	 *         REVISION_NUMB 
	 *         ')' 
	 *         ('versionID' REVISION_NUMB)? 
	 *         ('pre_version' pre_version)? 
	 *         (ambiguity) 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'configConnections' 
	 *         '(' 
	 *         configConnections+=ClassConnection
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         '(' 
	 *         REVISION_NUMB 
	 *         ')' 
	 *         ('versionID' REVISION_NUMB)? 
	 *         ('pre_version' pre_version)? 
	 *         (ambiguity) 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'interface_types' 
	 *         '(' 
	 *         interfaceTypes+=InterfaceType
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         '(' 
	 *         REVISION_NUMB 
	 *         ')' 
	 *         ('versionID' REVISION_NUMB)? 
	 *         ('pre_version' pre_version)? 
	 *         (ambiguity) 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         (rule end)
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         ('(' REVISION_NUMB ')')? 
	 *         ('versionID' REVISION_NUMB)? 
	 *         ('pre_version' pre_version)? 
	 *         (ambiguity) 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'component_types' 
	 *         '(' 
	 *         comptypes+=CompType
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         ('(' REVISION_NUMB ')')? 
	 *         ('versionID' REVISION_NUMB)? 
	 *         ('pre_version' pre_version)? 
	 *         (ambiguity) 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'configConnections' 
	 *         '(' 
	 *         configConnections+=ClassConnection
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         ('(' REVISION_NUMB ')')? 
	 *         ('versionID' REVISION_NUMB)? 
	 *         ('pre_version' pre_version)? 
	 *         (ambiguity) 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'interface_types' 
	 *         '(' 
	 *         interfaceTypes+=InterfaceType
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         ('(' REVISION_NUMB ')')? 
	 *         ('versionID' REVISION_NUMB)? 
	 *         ('pre_version' pre_version)? 
	 *         (ambiguity) 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=configuration_name 
	 *         ('versionID' REVISION_NUMB)? 
	 *         ('pre_version' pre_version)? 
	 *         (ambiguity) 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'component_types' 
	 *         '(' 
	 *         comptypes+=CompType
	 *     )
	 *     (
	 *         name=configuration_name 
	 *         ('versionID' REVISION_NUMB)? 
	 *         ('pre_version' pre_version)? 
	 *         (ambiguity) 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'configConnections' 
	 *         '(' 
	 *         configConnections+=ClassConnection
	 *     )
	 *     (
	 *         name=configuration_name 
	 *         ('versionID' REVISION_NUMB)? 
	 *         ('pre_version' pre_version)? 
	 *         (ambiguity) 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'interface_types' 
	 *         '(' 
	 *         interfaceTypes+=InterfaceType
	 *     )
	 *     (
	 *         name=configuration_name 
	 *         ('versionID' REVISION_NUMB)? 
	 *         ('pre_version' pre_version)? 
	 *         (ambiguity) 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         (rule end)
	 *     )
	 *     implements+=[Specification|EString] '(' REVISION_NUMB ')' ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? (ambiguity) 'component_classes' configComponents+=CompClass
	 *     implements+=[Specification|EString] ('(' REVISION_NUMB ')')? ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? (ambiguity) 'component_classes' configComponents+=CompClass
	 *     name=configuration_name ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? (ambiguity) 'component_classes' configComponents+=CompClass
	 */
	protected void emit_Configuration___ByKeyword_5_0_ChangeParserRuleCall_5_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)?
	 *
	 * This ambiguous syntax occurs at:
	 *     configComponents+=CompClass (ambiguity) 'component_types' '(' comptypes+=CompType
	 *     configComponents+=CompClass (ambiguity) 'configConnections' '(' configConnections+=ClassConnection
	 *     configComponents+=CompClass (ambiguity) 'interface_types' '(' interfaceTypes+=InterfaceType
	 *     configComponents+=CompClass (ambiguity) (rule end)
	 *     implements+=[Specification|EString] '(' REVISION_NUMB ')' ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? ('by' change)? (ambiguity) 'component_types' '(' comptypes+=CompType
	 *     implements+=[Specification|EString] '(' REVISION_NUMB ')' ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? ('by' change)? (ambiguity) 'configConnections' '(' configConnections+=ClassConnection
	 *     implements+=[Specification|EString] '(' REVISION_NUMB ')' ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? ('by' change)? (ambiguity) 'interface_types' '(' interfaceTypes+=InterfaceType
	 *     implements+=[Specification|EString] '(' REVISION_NUMB ')' ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? ('by' change)? (ambiguity) (rule end)
	 *     implements+=[Specification|EString] ('(' REVISION_NUMB ')')? ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? ('by' change)? (ambiguity) 'component_types' '(' comptypes+=CompType
	 *     implements+=[Specification|EString] ('(' REVISION_NUMB ')')? ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? ('by' change)? (ambiguity) 'configConnections' '(' configConnections+=ClassConnection
	 *     implements+=[Specification|EString] ('(' REVISION_NUMB ')')? ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? ('by' change)? (ambiguity) 'interface_types' '(' interfaceTypes+=InterfaceType
	 *     implements+=[Specification|EString] ('(' REVISION_NUMB ')')? ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? ('by' change)? (ambiguity) (rule end)
	 *     name=configuration_name ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? ('by' change)? (ambiguity) 'component_types' '(' comptypes+=CompType
	 *     name=configuration_name ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? ('by' change)? (ambiguity) 'configConnections' '(' configConnections+=ClassConnection
	 *     name=configuration_name ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? ('by' change)? (ambiguity) 'interface_types' '(' interfaceTypes+=InterfaceType
	 *     name=configuration_name ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? ('by' change)? (ambiguity) (rule end)
	 */
	protected void emit_Configuration___Connector_classesKeyword_7_0_Connector_classParserRuleCall_7_1_AsKeyword_7_2_Connection_nameParserRuleCall_7_3___SemicolonKeyword_7_4_0_Connector_classParserRuleCall_7_4_1_AsKeyword_7_4_2_Connection_nameParserRuleCall_7_4_3__a__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' REVISION_NUMB ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         implements+=[Specification|EString] 
	 *         (ambiguity) 
	 *         ('versionID' REVISION_NUMB)? 
	 *         ('pre_version' pre_version)? 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'component_types' 
	 *         '(' 
	 *         comptypes+=CompType
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         (ambiguity) 
	 *         ('versionID' REVISION_NUMB)? 
	 *         ('pre_version' pre_version)? 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'configConnections' 
	 *         '(' 
	 *         configConnections+=ClassConnection
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         (ambiguity) 
	 *         ('versionID' REVISION_NUMB)? 
	 *         ('pre_version' pre_version)? 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'interface_types' 
	 *         '(' 
	 *         interfaceTypes+=InterfaceType
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         (ambiguity) 
	 *         ('versionID' REVISION_NUMB)? 
	 *         ('pre_version' pre_version)? 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         (rule end)
	 *     )
	 *     implements+=[Specification|EString] (ambiguity) ';' implements+=[Specification|EString]
	 *     implements+=[Specification|EString] (ambiguity) ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? ('by' change)? 'component_classes' configComponents+=CompClass
	 */
	protected void emit_Configuration___LeftParenthesisKeyword_2_2_0_REVISION_NUMBTerminalRuleCall_2_2_1_RightParenthesisKeyword_2_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('pre_version' pre_version)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         implements+=[Specification|EString] 
	 *         '(' 
	 *         REVISION_NUMB 
	 *         ')' 
	 *         ('versionID' REVISION_NUMB)? 
	 *         (ambiguity) 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'component_types' 
	 *         '(' 
	 *         comptypes+=CompType
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         '(' 
	 *         REVISION_NUMB 
	 *         ')' 
	 *         ('versionID' REVISION_NUMB)? 
	 *         (ambiguity) 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'configConnections' 
	 *         '(' 
	 *         configConnections+=ClassConnection
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         '(' 
	 *         REVISION_NUMB 
	 *         ')' 
	 *         ('versionID' REVISION_NUMB)? 
	 *         (ambiguity) 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'interface_types' 
	 *         '(' 
	 *         interfaceTypes+=InterfaceType
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         '(' 
	 *         REVISION_NUMB 
	 *         ')' 
	 *         ('versionID' REVISION_NUMB)? 
	 *         (ambiguity) 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         (rule end)
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         ('(' REVISION_NUMB ')')? 
	 *         ('versionID' REVISION_NUMB)? 
	 *         (ambiguity) 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'component_types' 
	 *         '(' 
	 *         comptypes+=CompType
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         ('(' REVISION_NUMB ')')? 
	 *         ('versionID' REVISION_NUMB)? 
	 *         (ambiguity) 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'configConnections' 
	 *         '(' 
	 *         configConnections+=ClassConnection
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         ('(' REVISION_NUMB ')')? 
	 *         ('versionID' REVISION_NUMB)? 
	 *         (ambiguity) 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'interface_types' 
	 *         '(' 
	 *         interfaceTypes+=InterfaceType
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         ('(' REVISION_NUMB ')')? 
	 *         ('versionID' REVISION_NUMB)? 
	 *         (ambiguity) 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=configuration_name 
	 *         ('versionID' REVISION_NUMB)? 
	 *         (ambiguity) 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'component_types' 
	 *         '(' 
	 *         comptypes+=CompType
	 *     )
	 *     (
	 *         name=configuration_name 
	 *         ('versionID' REVISION_NUMB)? 
	 *         (ambiguity) 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'configConnections' 
	 *         '(' 
	 *         configConnections+=ClassConnection
	 *     )
	 *     (
	 *         name=configuration_name 
	 *         ('versionID' REVISION_NUMB)? 
	 *         (ambiguity) 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'interface_types' 
	 *         '(' 
	 *         interfaceTypes+=InterfaceType
	 *     )
	 *     implements+=[Specification|EString] '(' REVISION_NUMB ')' ('versionID' REVISION_NUMB)? (ambiguity) ('by' change)? 'component_classes' configComponents+=CompClass
	 *     implements+=[Specification|EString] ('(' REVISION_NUMB ')')? ('versionID' REVISION_NUMB)? (ambiguity) ('by' change)? 'component_classes' configComponents+=CompClass
	 *     name=configuration_name ('versionID' REVISION_NUMB)? (ambiguity) ('by' change)? 'component_classes' configComponents+=CompClass
	 *     name=configuration_name ('versionID' REVISION_NUMB)? (ambiguity) ('by' change)? ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? (rule end)
	 */
	protected void emit_Configuration___Pre_versionKeyword_4_0_Pre_versionParserRuleCall_4_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('versionID' REVISION_NUMB)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (
	 *         implements+=[Specification|EString] 
	 *         '(' 
	 *         REVISION_NUMB 
	 *         ')' 
	 *         (ambiguity) 
	 *         ('pre_version' pre_version)? 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'component_types' 
	 *         '(' 
	 *         comptypes+=CompType
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         '(' 
	 *         REVISION_NUMB 
	 *         ')' 
	 *         (ambiguity) 
	 *         ('pre_version' pre_version)? 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'configConnections' 
	 *         '(' 
	 *         configConnections+=ClassConnection
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         '(' 
	 *         REVISION_NUMB 
	 *         ')' 
	 *         (ambiguity) 
	 *         ('pre_version' pre_version)? 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'interface_types' 
	 *         '(' 
	 *         interfaceTypes+=InterfaceType
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         '(' 
	 *         REVISION_NUMB 
	 *         ')' 
	 *         (ambiguity) 
	 *         ('pre_version' pre_version)? 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         (rule end)
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         ('(' REVISION_NUMB ')')? 
	 *         (ambiguity) 
	 *         ('pre_version' pre_version)? 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'component_types' 
	 *         '(' 
	 *         comptypes+=CompType
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         ('(' REVISION_NUMB ')')? 
	 *         (ambiguity) 
	 *         ('pre_version' pre_version)? 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'configConnections' 
	 *         '(' 
	 *         configConnections+=ClassConnection
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         ('(' REVISION_NUMB ')')? 
	 *         (ambiguity) 
	 *         ('pre_version' pre_version)? 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'interface_types' 
	 *         '(' 
	 *         interfaceTypes+=InterfaceType
	 *     )
	 *     (
	 *         implements+=[Specification|EString] 
	 *         ('(' REVISION_NUMB ')')? 
	 *         (ambiguity) 
	 *         ('pre_version' pre_version)? 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         (rule end)
	 *     )
	 *     (
	 *         name=configuration_name 
	 *         (ambiguity) 
	 *         ('pre_version' pre_version)? 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'component_types' 
	 *         '(' 
	 *         comptypes+=CompType
	 *     )
	 *     (
	 *         name=configuration_name 
	 *         (ambiguity) 
	 *         ('pre_version' pre_version)? 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'configConnections' 
	 *         '(' 
	 *         configConnections+=ClassConnection
	 *     )
	 *     (
	 *         name=configuration_name 
	 *         (ambiguity) 
	 *         ('pre_version' pre_version)? 
	 *         ('by' change)? 
	 *         ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? 
	 *         'interface_types' 
	 *         '(' 
	 *         interfaceTypes+=InterfaceType
	 *     )
	 *     implements+=[Specification|EString] '(' REVISION_NUMB ')' (ambiguity) ('pre_version' pre_version)? ('by' change)? 'component_classes' configComponents+=CompClass
	 *     implements+=[Specification|EString] ('(' REVISION_NUMB ')')? (ambiguity) ('pre_version' pre_version)? ('by' change)? 'component_classes' configComponents+=CompClass
	 *     name=configuration_name (ambiguity) ('pre_version' pre_version)? ('by' change)? 'component_classes' configComponents+=CompClass
	 *     name=configuration_name (ambiguity) ('pre_version' pre_version)? ('by' change)? ('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)? (rule end)
	 */
	protected void emit_Configuration___VersionIDKeyword_3_0_REVISION_NUMBTerminalRuleCall_3_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('by' change)?
	 *
	 * This ambiguous syntax occurs at:
	 *     specComponents+=CompRole ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? (ambiguity) 'interface_types' interfaceTypes+=InterfaceType
	 *     specComponents+=CompRole ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? (ambiguity) (rule end)
	 *     specConnections+=RoleConnection ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? (ambiguity) 'interface_types' interfaceTypes+=InterfaceType
	 *     specConnections+=RoleConnection ('versionID' REVISION_NUMB)? ('pre_version' pre_version)? (ambiguity) (rule end)
	 */
	protected void emit_Specification___ByKeyword_8_0_ChangeParserRuleCall_8_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('pre_version' pre_version)?
	 *
	 * This ambiguous syntax occurs at:
	 *     specComponents+=CompRole ('versionID' REVISION_NUMB)? (ambiguity) ('by' change)? 'interface_types' interfaceTypes+=InterfaceType
	 *     specComponents+=CompRole ('versionID' REVISION_NUMB)? (ambiguity) ('by' change)? (rule end)
	 *     specConnections+=RoleConnection ('versionID' REVISION_NUMB)? (ambiguity) ('by' change)? 'interface_types' interfaceTypes+=InterfaceType
	 *     specConnections+=RoleConnection ('versionID' REVISION_NUMB)? (ambiguity) ('by' change)? (rule end)
	 */
	protected void emit_Specification___Pre_versionKeyword_7_0_Pre_versionParserRuleCall_7_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('versionID' REVISION_NUMB)?
	 *
	 * This ambiguous syntax occurs at:
	 *     specComponents+=CompRole (ambiguity) ('pre_version' pre_version)? ('by' change)? 'interface_types' interfaceTypes+=InterfaceType
	 *     specComponents+=CompRole (ambiguity) ('pre_version' pre_version)? ('by' change)? (rule end)
	 *     specConnections+=RoleConnection (ambiguity) ('pre_version' pre_version)? ('by' change)? 'interface_types' interfaceTypes+=InterfaceType
	 *     specConnections+=RoleConnection (ambiguity) ('pre_version' pre_version)? ('by' change)? (rule end)
	 */
	protected void emit_Specification___VersionIDKeyword_6_0_REVISION_NUMBTerminalRuleCall_6_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
