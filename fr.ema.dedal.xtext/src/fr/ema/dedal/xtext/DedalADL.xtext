grammar fr.ema.dedal.xtext.DedalADL with org.eclipse.xtext.common.Terminals

import "platform:/resource/fr.ema.dedal.metamodel/model/dedal.ecore" as dedal 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


// ---------------------------------------------------------------------------------------
//										Common
// ---------------------------------------------------------------------------------------

DedalDiagram returns dedal::DedalDiagram:
	'dedal_diagram' name=EString
	(
		('architecture_descriptions' '(' architectureDescriptions+=ArchitectureDescription ( ";" architectureDescriptions+=ArchitectureDescription)* ')' )?
		('repositories' '(' repositories+=Repository ( ";" repositories+=Repository)* ')' )?
	);

ArchitectureDescription returns dedal::ArchitectureDescription:
	Specification | Configuration | Assembly;

Component returns dedal::Component:
	CompRole | CompClass_Impl | CompInstance | CompositeCompClass | CompType;

CompClass returns dedal::CompClass:
	CompClass_Impl | CompositeCompClass;
	
Interaction returns dedal::Interaction:
	Interface | Port_Impl | CompositePort;

Port returns dedal::Port:
	Port_Impl | CompositePort;

EString returns ecore::EString:
	STRING | ID;

Repository returns dedal::Repository:
	'repository' name=EString
	('components' '(' components+=Component ( ";" components+=Component)* ')' )?
	('interface_types' '(' interfaceTypes+=InterfaceType ( ";" interfaceTypes+=InterfaceType)* ')' )?
;

InterfaceType returns dedal::InterfaceType:
	'type' name=EString
	'signatures' '(' signatures+=Signature ( ";" signatures+=Signature)* ')' 
;

				
EInt returns ecore::EInt:
	'-'? INT;
	
Signature returns dedal::Signature:
	'signature' id=EString
	('name' name=EString)?
	('type' type=EString)?
	('parameters' '(' parameters+=Parameter ( ";" parameters+=Parameter)* ')' )?
;

Parameter returns dedal::Parameter:
	'parameter' id=EString
	('name' name=EString)?
	('type' type=EString)?
;
		
				

// ---------------------------------------------------------------------------------------
//									Specification
// ---------------------------------------------------------------------------------------


Specification returns dedal::Specification:
	'specification' name=specification_name
		'component_roles' specComponents+=CompRole ( ';' specComponents+=CompRole )*
		('connections' specConnections+=RoleConnection (specConnections+=RoleConnection)* )?
		// 'architecture_behavior' architecture_behavior
		('versionID' REVISION_NUMB)?
		('pre_version' pre_version)?
		('by' change)?
		
		// Missing attributes from old metamodel
		('interface_types' interfaceTypes+=InterfaceType ( ';' interfaceTypes+=InterfaceType)* )?
;

specification_name:
	ID
;


CompRole returns dedal::CompRole:
	'component_role' name=component_role_name
		'id' id=EString
		('required_interfaces' compInterfaces+=Interface(";" compInterfaces+=Interface)*)?
		('provided_interfaces' compInterfaces+=Interface(";" compInterfaces+=Interface)*)?
		('MinInstanceNbr' minInstanceNbr=INT)?
		('MaxInstanceNbr' maxInstanceNbr=INT)?
		// ('role_behavior' component_behavior)?
		
		// Missing attributes from old metamodel
		('interactions' compInterfaces+=Interaction (';' compInterfaces+=Interaction)*)?
;

component_role_name:
	ID
;

Interface returns dedal::Interface:
	'interface' name=interface_name
//		'id' id=EString
		'interface_direction' direction=DIRECTION
		'implementation' type=[dedal::InterfaceType|EString]
		
		// Missing attributes from old metamodel
		('delegation' delegation=[dedal::Interface|EString])?
		('instantiates' instantiates=[dedal::Interface|EString])?
;	

interface_name:
	ID
;
	
enum DIRECTION returns dedal::DIRECTION:
				PROVIDED = 'provided' | REQUIRED = 'required';

RoleConnection returns dedal::RoleConnection:
	'connection' //connection_name
		//'id' 
		refID=EString
		'client' clientCompElem=[dedal::CompRole|EString] '.' clientIntElem=[dedal::Interaction|EString]
		'server' serverCompElem=[dedal::CompRole|EString] '.' serverIntElem=[dedal::Interaction|EString]
;

connection_name:
	ID
;



// ---------------------------------------------------------------------------------------
//									Configuration
// ---------------------------------------------------------------------------------------


Configuration returns dedal::Configuration:
	'configuration' name=configuration_name
		('implements' implements+=[dedal::Specification|EString] ('(' REVISION_NUMB ')')? (';' implements+=[dedal::Specification|EString] '(' REVISION_NUMB ')' )*)?
		('versionID' REVISION_NUMB)?
		('pre_version' pre_version)?
		('by' change)?
		('component_classes' configComponents+=CompClass (';' configComponents+=CompClass)*)?
		('connector_classes' connector_class 'as' connection_name (';' connector_class 'as' connection_name)*)?
		
		// Missing attributes from old metamodel
		('interface_types' '(' interfaceTypes+=InterfaceType ( ";" interfaceTypes+=InterfaceType)* ')')?
		('component_types' '(' comptypes+=CompType ( ";" comptypes+=CompType)* ')' )?
		('configConnections' '(' configConnections+=ClassConnection ( ";" configConnections+=ClassConnection)* ')')?
;

configuration_name:
	ID
;

component_class_name:
	ID
;

CompType returns dedal::CompType:
	'component_type' name=component_type_name
		'id' id=EString
		('required_interfaces' compInterfaces+=Interface( ";" compInterfaces+=Interface)*)?
		('provided_interfaces' compInterfaces+=Interface ( ";" compInterfaces+=Interface)*)?
		// 'component_behavior' component_behavior
		
		// Missing attributes from old metamodel
		('interactions' compInterfaces+=Interaction( ";" compInterfaces+=Interaction)* )?
;

component_type_name:
	ID
;

CompClass_Impl returns dedal::CompClass:
	'primitive_component_class' name=component_class_name ('as' realizes+=[dedal::CompRole|EString] ( ";" realizes+=[dedal::CompRole|EString])*)?
		'id' id=EString
		'implements' implements=[dedal::CompType|EString]
		('content' content=[dedal::CompInstance|EString])? 
		('attributes' '(' attributes+=Attribute ( ";" attributes+=Attribute)* ')')? 
		('versionID' REVISION_NUMB)? 
		('pre_version' REVISION_NUMB)? 
		// ('motivation' motivation)?
		// ('condition' condition)? 
		
		// Missing attributes from old metamodel
		('interfaces' compInterfaces+=Interaction ( ";" compInterfaces+=Interaction)* )? 	
;

Attribute returns dedal::Attribute:
	type=EString name=attribute_name
;

attribute_name:
	ID
;

enum ATTRIBUTE_TYPE returns dedal::ATTRIBUTE_TYPE:
	BOOLEAN = 'boolean' | BYTE = 'byte' | CHAR= 'char' | SHORT = 'short' |
	INT = 'int' | FLOAT = 'float' | LONG = 'long' | DOUBLE = 'double' | STRING = 'string' |
	CLASS_NAME = 'class_name' | INTERFACE_NAME = 'interface_name'
;

CompositeCompClass returns dedal::CompositeCompClass:
	'composite_component_class' name=component_class_name
		'id' id=EString
		'implements' implements=[dedal::CompType|EString]
		('content' uses=[dedal::Configuration|EString] ('(' REVISION_NUMB ')')?)?
		('delegated_interfaces' delegated_interface_list)?
		('attributes' '(' attributes+=Attribute ( ";" attributes+=Attribute)* ')')?
		('versionID' REVISION_NUMB)?
		('pre_version' REVISION_NUMB)?
		// ('motivation' motivation)?
		// ('condition' condition)?
		
		// Missing attributes from old metamodel
		('realizes' '(' realizes+=[dedal::CompRole|EString] ( ";" realizes+=[dedal::CompRole|EString])* ')' )?
		('interfaces' compInterfaces+=Interaction ( ";" compInterfaces+=Interaction)*)?
		('delegated_old' delegatedInterfaces+=[dedal::Interaction] (';' delegatedInterfaces+=[dedal::Interaction])* )?
;

	
delegated_interface_list:
	'provided' | 'required' inner_interface 'as' outer_interface
	(';' 'provided' | 'required' inner_interface 'as' outer_interface)*
;

inner_interface:
	component_class_identifier '[' component_role_name ']' '.' interface_name
;

outer_interface:
	component_type_name '.' interface_name
;

component_class_identifier:
	component_class_name ('(' REVISION_NUMB ')')?
;

connector_type:
	'connector_type' connector_type_name
	'provided_interfaces' interface_name ( ';' interface_name)*
	'required_interfaces' interface_name ( ';' interface_name)*
	// 'connector_protocol' connector_protocol
;

connector_type_name:
	ID
;

connector_class:
	'connector' connector_class_name
	'implements' connector_type
	// 'content' implementation_class
;

connector_class_name:
	ID
;

// From old metamodel
ClassConnection returns dedal::ClassConnection:
	'class_connection' refID=EString
		'client' clientClassElem=[dedal::CompClass|EString] '.' clientIntElem=[dedal::Interaction|EString]
		'server' serverClassElem=[dedal::CompClass|EString] '.' serverIntElem=[dedal::Interaction|EString]
;


Port_Impl returns dedal::Port:
	'port' name=EString
//		'id' id=EString
		'interfaces' '(' interfaces+=[dedal::Interface|EString] ( "," interfaces+=[dedal::Interface|EString])* ')'
;

CompositePort returns dedal::CompositePort:
	'composite_port' name=EString
//		'id' id=EString
		'ports' '(' ports+=[dedal::Port|EString] ( "," ports+=[dedal::Port|EString])* ')'	
;	



// ---------------------------------------------------------------------------------------
//									Assembly
// ---------------------------------------------------------------------------------------

Assembly returns dedal::Assembly:
	'assembly' name=assembly_name
		'instance_of' instantiates=[dedal::Configuration|EString] ('(' REVISION_NUMB ')')?
		('versionID' REVISION_NUMB)?
		'component_instances'  '(' assmComponents+=CompInstance ( ";" assmComponents+=CompInstance)* ')'
		('assembly_constraints' '(' Constraint ( ";" Constraint)* ')')?
		('pre_version' version)?
		('by' change)?
		
		// Missing attributes from old metamodel
		('interface_types' '(' interfaceTypes+=InterfaceType ( ";" interfaceTypes+=InterfaceType)* ')' )?
		('assembly_connections' '(' assemblyConnections+=InstConnection ( ";" assemblyConnections+=InstConnection)* ')' )?
;

assembly_name:
	ID
;

Constraint:
	 'expression' constraint_expression
;

CompInstance returns dedal::CompInstance:
	'component_instance' name=component_instance_name ('as' role=[dedal::CompRole|EString])?
		'id' id=EString
		'instance_of' instantiates=[dedal::CompClass|EString]
		//('initiation_state' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}')?
		//('current_state' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}')?
		
		// Missing attributes from old metamodel
		('component_interfaces' compInterfaces+=Interaction ( ";" compInterfaces+=Interaction)*)? 
;

component_instance_name:
	ID
;

InstConnection returns dedal::InstConnection:
	'instance_connection' refID=EString
		'client' clientInstElem=[dedal::CompInstance|EString] '.' clientIntElem=[dedal::Interaction|EString]
		'server' serverInstElem=[dedal::CompInstance|EString] '.' serverIntElem=[dedal::Interaction|EString]
;



// ---------------------------------------------------------------------------------------
//								Constraint expression stuff 
// ---------------------------------------------------------------------------------------


constraint_expression:
	('!' constraint_expression logical_constraint) | (relational_constraint logical_constraint)
;

logical_constraint:
	(('||' constraint_expression logical_constraint) | ('&&' constraint_expression logical_constraint))?
;

relational_constraint:
	(instance_attribute ( '==' | '!=' | '>' | '<' | '>=' | '<=' ) (instance_attribute | attribute_value))
;

instance_attribute:
	component_instance_name '.' attribute_name
;

attribute_value returns ecore::EString:
	attribute_name '=' // value of the correct type
;

// ---------------------------------------------------------------------------------------
//								Evolution stuff 
// ---------------------------------------------------------------------------------------


version:
	ID '(' REVISION_NUMB ')'
;

pre_version:
	ID? '(' REVISION_NUMB ')'
;

terminal REVISION_NUMB:
	('1'..'9')('0'..'9')*'.'('0'..'9')+
;


change :
	'change' ID
	'time' change_time
	'level' initial_level
	'operation' change_operation
	'artifact' architecture_element 'is' EString
	'purpose' change_purpose
	'origin' change_origin ('from' change)?
;

change_time returns ecore::EString:
	'static' | 'dynamic'
;

initial_level returns ecore::EString:
	'specification'|'configuration'|'assembly'
;

change_operation returns ecore::EString:
	'addition'|'removal'|'substitution'|'modification'
;

architecture_element returns ecore::EString:
	specification_element | configuration_element | assembly_element
;

specification_element returns ecore::EString:
	'component_role'|'connection'|'architecture_behavior'
;

configuration_element returns ecore::EString:
	'component_class'|'connector_class'
;

assembly_element returns ecore::EString:
	'component_instance'|'connector_instance'|'assembly_constraint'
;

change_purpose returns ecore::EString:
	'corrective'|'perfective'|'adaptative'
;

change_origin returns ecore::EString:
	'given'|'generated'|'propagated'
;

	
