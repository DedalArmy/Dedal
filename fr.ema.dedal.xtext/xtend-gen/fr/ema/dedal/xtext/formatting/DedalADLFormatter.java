/**
 * generated by Xtext
 */
package fr.ema.dedal.xtext.formatting;

import com.google.inject.Inject;
import fr.ema.dedal.xtext.services.DedalADLGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom formatting declarations.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormatter} as an example
 */
@SuppressWarnings("all")
public class DedalADLFormatter extends AbstractDeclarativeFormatter {
  @Inject
  @Extension
  private DedalADLGrammarAccess _dedalADLGrammarAccess;
  
  @Override
  protected void configureFormatting(final FormattingConfig c) {
    List<Pair<Keyword, Keyword>> _findKeywordPairs = this._dedalADLGrammarAccess.findKeywordPairs("(", ")");
    for (final Pair<Keyword, Keyword> pair : _findKeywordPairs) {
      {
        c.setIndentation(pair.getFirst(), pair.getSecond());
        c.setLinewrap(1).after(pair.getFirst());
        c.setLinewrap(1).before(pair.getSecond());
        c.setLinewrap(1).after(pair.getSecond());
      }
    }
    List<Keyword> _findKeywords = this._dedalADLGrammarAccess.findKeywords(".");
    for (final Keyword dot : _findKeywords) {
      {
        c.setNoLinewrap().before(dot);
        c.setNoSpace().before(dot);
        c.setNoSpace().after(dot);
      }
    }
    List<Keyword> _findKeywords_1 = this._dedalADLGrammarAccess.findKeywords(";");
    for (final Keyword semicolumn : _findKeywords_1) {
      {
        c.setNoLinewrap().before(semicolumn);
        c.setNoSpace().before(semicolumn);
        c.setLinewrap().after(semicolumn);
      }
    }
    List<Keyword> _findKeywords_2 = this._dedalADLGrammarAccess.findKeywords("dedal_diagram");
    for (final Keyword item : _findKeywords_2) {
      c.setIndentationIncrement().after(item);
    }
    List<Keyword> _findKeywords_3 = this._dedalADLGrammarAccess.findKeywords("component_instances");
    for (final Keyword compinsts : _findKeywords_3) {
      c.setLinewrap().before(compinsts);
    }
    List<Keyword> _findKeywords_4 = this._dedalADLGrammarAccess.findKeywords("component_instance");
    for (final Keyword compinst : _findKeywords_4) {
      c.setLinewrap().before(compinst);
    }
    List<Keyword> _findKeywords_5 = this._dedalADLGrammarAccess.findKeywords("instance_connection");
    for (final Keyword instCon : _findKeywords_5) {
      c.setLinewrap().before(instCon);
    }
    List<Keyword> _findKeywords_6 = this._dedalADLGrammarAccess.findKeywords("specification", "configuration", "assembly", "repository", "components", "interface_types", 
      "type", "primitive_component_class", "component_type", "component_instance", "assembly_connections", "instance_connection", 
      "component_instances", "configConnections", "class_connection", "connection", "component_role", "connections");
    for (final Keyword item_1 : _findKeywords_6) {
      c.setLinewrap(2, 2, 2).before(item_1);
    }
    List<Keyword> _findKeywords_7 = this._dedalADLGrammarAccess.findKeywords("client");
    for (final Keyword item_2 : _findKeywords_7) {
      {
        c.setIndentationIncrement().before(item_2);
        c.setLinewrap().before(item_2);
      }
    }
    List<Keyword> _findKeywords_8 = this._dedalADLGrammarAccess.findKeywords("server");
    for (final Keyword item_3 : _findKeywords_8) {
      {
        c.setLinewrap().before(item_3);
        c.setIndentationDecrement().after(item_3);
      }
    }
    List<Keyword> _findKeywords_9 = this._dedalADLGrammarAccess.findKeywords("id", "instance_of", "implements", "interfaces", "component_interfaces");
    for (final Keyword item_4 : _findKeywords_9) {
      {
        c.setLinewrap().before(item_4);
        c.setIndentationIncrement().before(item_4);
        c.setIndentationDecrement().after(item_4);
      }
    }
    List<Keyword> _findKeywords_10 = this._dedalADLGrammarAccess.findKeywords("interface");
    for (final Keyword item_5 : _findKeywords_10) {
      {
        c.setLinewrap().before(item_5);
        c.setIndentationIncrement().before(item_5);
        c.setIndentationIncrement().before(item_5);
        c.setIndentationDecrement().after(item_5);
        c.setIndentationDecrement().after(item_5);
      }
    }
    List<Keyword> _findKeywords_11 = this._dedalADLGrammarAccess.findKeywords("interface_direction", "implementation", "instantiates");
    for (final Keyword item_6 : _findKeywords_11) {
      {
        c.setLinewrap().before(item_6);
        c.setIndentationIncrement().before(item_6);
        c.setIndentationIncrement().before(item_6);
        c.setIndentationIncrement().before(item_6);
        c.setIndentationDecrement().after(item_6);
        c.setIndentationDecrement().after(item_6);
        c.setIndentationDecrement().after(item_6);
      }
    }
    List<Keyword> _findKeywords_12 = this._dedalADLGrammarAccess.findKeywords("architecture_descriptions", "repositories");
    for (final Keyword item_7 : _findKeywords_12) {
      c.setLinewrap(2, 2, 2).before(item_7);
    }
    List<Pair<Keyword, Keyword>> _findKeywordPairs_1 = this._dedalADLGrammarAccess.findKeywordPairs("configConnections", ")");
    for (final Pair<Keyword, Keyword> item_8 : _findKeywordPairs_1) {
      {
        c.setLinewrap().before(item_8.getFirst());
        c.setIndentationIncrement().before(item_8.getFirst());
        c.setIndentationDecrement().after(item_8.getSecond());
      }
    }
    List<Pair<Keyword, Keyword>> _findKeywordPairs_2 = this._dedalADLGrammarAccess.findKeywordPairs("component_instances", ")");
    for (final Pair<Keyword, Keyword> item_9 : _findKeywordPairs_2) {
      {
        c.setLinewrap().before(item_9.getFirst());
        c.setIndentationIncrement().before(item_9.getFirst());
        c.setIndentationDecrement().after(item_9.getSecond());
      }
    }
    List<Pair<Keyword, Keyword>> _findKeywordPairs_3 = this._dedalADLGrammarAccess.findKeywordPairs("assembly_connections", ")");
    for (final Pair<Keyword, Keyword> item_10 : _findKeywordPairs_3) {
      {
        c.setLinewrap().before(item_10.getFirst());
        c.setIndentationIncrement().before(item_10.getFirst());
        c.setIndentationDecrement().after(item_10.getSecond());
      }
    }
    List<Pair<Keyword, Keyword>> _findKeywordPairs_4 = this._dedalADLGrammarAccess.findKeywordPairs("components", ")");
    for (final Pair<Keyword, Keyword> item_11 : _findKeywordPairs_4) {
      {
        c.setLinewrap().before(item_11.getFirst());
        c.setIndentationIncrement().before(item_11.getFirst());
        c.setIndentationDecrement().after(item_11.getSecond());
      }
    }
    List<Pair<Keyword, Keyword>> _findKeywordPairs_5 = this._dedalADLGrammarAccess.findKeywordPairs("attributes", ")");
    for (final Pair<Keyword, Keyword> item_12 : _findKeywordPairs_5) {
      {
        c.setLinewrap().before(item_12.getFirst());
        c.setIndentationIncrement().before(item_12.getFirst());
        c.setIndentationDecrement().after(item_12.getSecond());
      }
    }
    List<Pair<Keyword, Keyword>> _findKeywordPairs_6 = this._dedalADLGrammarAccess.findKeywordPairs("signatures", ")");
    for (final Pair<Keyword, Keyword> item_13 : _findKeywordPairs_6) {
      {
        c.setLinewrap().before(item_13.getFirst());
        c.setIndentationIncrement().before(item_13.getFirst());
        c.setIndentationDecrement().after(item_13.getSecond());
      }
    }
    List<Pair<Keyword, Keyword>> _findKeywordPairs_7 = this._dedalADLGrammarAccess.findKeywordPairs("component_instance", ")");
    for (final Pair<Keyword, Keyword> item_14 : _findKeywordPairs_7) {
      {
        c.setLinewrap().before(item_14.getFirst());
        c.setIndentationIncrement().before(item_14.getFirst());
        c.setIndentationDecrement().after(item_14.getSecond());
      }
    }
    List<Pair<Keyword, Keyword>> _findKeywordPairs_8 = this._dedalADLGrammarAccess.findKeywordPairs("component_interfaces", "component_instance");
    for (final Pair<Keyword, Keyword> item_15 : _findKeywordPairs_8) {
      {
        c.setLinewrap().before(item_15.getFirst());
        c.setIndentationIncrement().before(item_15.getFirst());
        c.setIndentationDecrement().after(item_15.getSecond());
      }
    }
    c.setLinewrap(0, 1, 2).before(this._dedalADLGrammarAccess.getSL_COMMENTRule());
    c.setLinewrap(0, 1, 2).before(this._dedalADLGrammarAccess.getML_COMMENTRule());
    c.setLinewrap(0, 1, 1).after(this._dedalADLGrammarAccess.getML_COMMENTRule());
  }
}
