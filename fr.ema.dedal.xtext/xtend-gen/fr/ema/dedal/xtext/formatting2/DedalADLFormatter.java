/**
 * generated by Xtext
 */
package fr.ema.dedal.xtext.formatting2;

import com.google.inject.Inject;
import dedal.ArchitectureDescription;
import dedal.Assembly;
import dedal.Attribute;
import dedal.ClassConnection;
import dedal.CompClass;
import dedal.CompInstance;
import dedal.CompRole;
import dedal.CompType;
import dedal.Component;
import dedal.CompositeCompClass;
import dedal.Configuration;
import dedal.DedalDiagram;
import dedal.InstConnection;
import dedal.Interaction;
import dedal.InterfaceType;
import dedal.Parameter;
import dedal.Repository;
import dedal.RoleConnection;
import dedal.Signature;
import dedal.Specification;
import fr.ema.dedal.xtext.services.DedalADLGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class DedalADLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private DedalADLGrammarAccess _dedalADLGrammarAccess;
  
  protected void _format(final DedalDiagram dedaldiagram, @Extension final IFormattableDocument document) {
    EList<ArchitectureDescription> _architectureDescriptions = dedaldiagram.getArchitectureDescriptions();
    for (final ArchitectureDescription architectureDescriptions : _architectureDescriptions) {
      this.format(architectureDescriptions, document);
    }
    EList<Repository> _repositories = dedaldiagram.getRepositories();
    for (final Repository repositories : _repositories) {
      this.format(repositories, document);
    }
  }
  
  protected void _format(final Repository repository, @Extension final IFormattableDocument document) {
    EList<Component> _components = repository.getComponents();
    for (final Component components : _components) {
      this.format(components, document);
    }
    EList<InterfaceType> _interfaceTypes = repository.getInterfaceTypes();
    for (final InterfaceType interfaceTypes : _interfaceTypes) {
      this.format(interfaceTypes, document);
    }
  }
  
  protected void _format(final InterfaceType interfacetype, @Extension final IFormattableDocument document) {
    EList<Signature> _signatures = interfacetype.getSignatures();
    for (final Signature signatures : _signatures) {
      this.format(signatures, document);
    }
  }
  
  protected void _format(final Signature signature, @Extension final IFormattableDocument document) {
    EList<Parameter> _parameters = signature.getParameters();
    for (final Parameter parameters : _parameters) {
      this.format(parameters, document);
    }
  }
  
  protected void _format(final Specification specification, @Extension final IFormattableDocument document) {
    EList<CompRole> _specComponents = specification.getSpecComponents();
    for (final CompRole specComponents : _specComponents) {
      this.format(specComponents, document);
    }
    EList<RoleConnection> _specConnections = specification.getSpecConnections();
    for (final RoleConnection specConnections : _specConnections) {
      this.format(specConnections, document);
    }
    EList<InterfaceType> _interfaceTypes = specification.getInterfaceTypes();
    for (final InterfaceType interfaceTypes : _interfaceTypes) {
      this.format(interfaceTypes, document);
    }
  }
  
  protected void _format(final CompRole comprole, @Extension final IFormattableDocument document) {
    EList<Interaction> _compInterfaces = comprole.getCompInterfaces();
    for (final Interaction compInterfaces : _compInterfaces) {
      this.format(compInterfaces, document);
    }
  }
  
  protected void _format(final Configuration configuration, @Extension final IFormattableDocument document) {
    EList<CompClass> _configComponents = configuration.getConfigComponents();
    for (final CompClass configComponents : _configComponents) {
      this.format(configComponents, document);
    }
    EList<InterfaceType> _interfaceTypes = configuration.getInterfaceTypes();
    for (final InterfaceType interfaceTypes : _interfaceTypes) {
      this.format(interfaceTypes, document);
    }
    EList<CompType> _comptypes = configuration.getComptypes();
    for (final CompType comptypes : _comptypes) {
      this.format(comptypes, document);
    }
    EList<ClassConnection> _configConnections = configuration.getConfigConnections();
    for (final ClassConnection configConnections : _configConnections) {
      this.format(configConnections, document);
    }
  }
  
  protected void _format(final CompType comptype, @Extension final IFormattableDocument document) {
    EList<Interaction> _compInterfaces = comptype.getCompInterfaces();
    for (final Interaction compInterfaces : _compInterfaces) {
      this.format(compInterfaces, document);
    }
  }
  
  protected void _format(final CompClass compclass, @Extension final IFormattableDocument document) {
    EList<Attribute> _attributes = compclass.getAttributes();
    for (final Attribute attributes : _attributes) {
      this.format(attributes, document);
    }
    EList<Interaction> _compInterfaces = compclass.getCompInterfaces();
    for (final Interaction compInterfaces : _compInterfaces) {
      this.format(compInterfaces, document);
    }
  }
  
  protected void _format(final CompositeCompClass compositecompclass, @Extension final IFormattableDocument document) {
    EList<Attribute> _attributes = compositecompclass.getAttributes();
    for (final Attribute attributes : _attributes) {
      this.format(attributes, document);
    }
    EList<Interaction> _compInterfaces = compositecompclass.getCompInterfaces();
    for (final Interaction compInterfaces : _compInterfaces) {
      this.format(compInterfaces, document);
    }
  }
  
  protected void _format(final Assembly assembly, @Extension final IFormattableDocument document) {
    EList<CompInstance> _assmComponents = assembly.getAssmComponents();
    for (final CompInstance assmComponents : _assmComponents) {
      this.format(assmComponents, document);
    }
    EList<InterfaceType> _interfaceTypes = assembly.getInterfaceTypes();
    for (final InterfaceType interfaceTypes : _interfaceTypes) {
      this.format(interfaceTypes, document);
    }
    EList<InstConnection> _assemblyConnections = assembly.getAssemblyConnections();
    for (final InstConnection assemblyConnections : _assemblyConnections) {
      this.format(assemblyConnections, document);
    }
  }
  
  protected void _format(final CompInstance compinstance, @Extension final IFormattableDocument document) {
    EList<Interaction> _compInterfaces = compinstance.getCompInterfaces();
    for (final Interaction compInterfaces : _compInterfaces) {
      this.format(compInterfaces, document);
    }
  }
  
  public void format(final Object compositecompclass, final IFormattableDocument document) {
    if (compositecompclass instanceof CompositeCompClass) {
      _format((CompositeCompClass)compositecompclass, document);
      return;
    } else if (compositecompclass instanceof XtextResource) {
      _format((XtextResource)compositecompclass, document);
      return;
    } else if (compositecompclass instanceof Assembly) {
      _format((Assembly)compositecompclass, document);
      return;
    } else if (compositecompclass instanceof CompClass) {
      _format((CompClass)compositecompclass, document);
      return;
    } else if (compositecompclass instanceof CompInstance) {
      _format((CompInstance)compositecompclass, document);
      return;
    } else if (compositecompclass instanceof CompRole) {
      _format((CompRole)compositecompclass, document);
      return;
    } else if (compositecompclass instanceof CompType) {
      _format((CompType)compositecompclass, document);
      return;
    } else if (compositecompclass instanceof Configuration) {
      _format((Configuration)compositecompclass, document);
      return;
    } else if (compositecompclass instanceof Specification) {
      _format((Specification)compositecompclass, document);
      return;
    } else if (compositecompclass instanceof DedalDiagram) {
      _format((DedalDiagram)compositecompclass, document);
      return;
    } else if (compositecompclass instanceof InterfaceType) {
      _format((InterfaceType)compositecompclass, document);
      return;
    } else if (compositecompclass instanceof Repository) {
      _format((Repository)compositecompclass, document);
      return;
    } else if (compositecompclass instanceof Signature) {
      _format((Signature)compositecompclass, document);
      return;
    } else if (compositecompclass instanceof EObject) {
      _format((EObject)compositecompclass, document);
      return;
    } else if (compositecompclass == null) {
      _format((Void)null, document);
      return;
    } else if (compositecompclass != null) {
      _format(compositecompclass, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(compositecompclass, document).toString());
    }
  }
}
